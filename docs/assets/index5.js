import{d as p,f as c,S as r,_ as h,c as a,a as t,e as s,w as d,r as o,o as i,i as b,g as f,t as $,b as w,A as E}from"./index.js";const T=p({name:"Destroy",data(){return{destroySingle:null,destroyMultiple:null}},mounted(){this.create()},methods:{create(){this.destroySingle=new r({select:this.$refs.destroySingle}),this.destroyMultiple=new r({select:this.$refs.destroyMultiple})},destroy(){this.destroySingle.destroy(),this.destroySingle=null,this.destroyMultiple.destroy(),this.destroyMultiple=null}},components:{ShikiStyle:c}}),_={id:"destroy",class:"content"},K={class:"row"},j={ref:"destroySingle"},G={ref:"destroyMultiple",multiple:""};function A(l,e,v,g,m,S){const u=o("ShikiStyle");return i(),a("div",_,[e[5]||(e[5]=t("h2",{class:"header"},"destroy",-1)),e[6]||(e[6]=t("p",null," The destroy method completely removes the SlimSelect instance and restores the original HTML select element to its native state. This is essential for cleanup operations, memory management, and scenarios where you need to revert to the original select element or recreate the SlimSelect instance with different configurations. ",-1)),e[7]||(e[7]=t("p",null," When called, this method removes all SlimSelect-generated DOM elements, event listeners, and internal state, leaving only the original select element. This is particularly useful in single-page applications, dynamic content scenarios, or when implementing component lifecycle management where SlimSelect instances need to be properly cleaned up to prevent memory leaks. ",-1)),t("div",K,[l.destroySingle?(i(),a("div",{key:1,class:"btn",onClick:e[1]||(e[1]=(...n)=>l.destroy&&l.destroy(...n))},"Destroy")):(i(),a("div",{key:0,class:"btn",onClick:e[0]||(e[0]=(...n)=>l.create&&l.create(...n))},"Create")),t("select",j,[...e[2]||(e[2]=[t("option",{value:"value1"},"Value 1",-1),t("option",{value:"value2"},"Value 2",-1),t("option",{value:"value3"},"Value 3",-1)])],512),t("select",G,[...e[3]||(e[3]=[t("option",{value:"value1"},"Value 1",-1),t("option",{value:"value2"},"Value 2",-1),t("option",{value:"value3"},"Value 3",-1)])],512)]),s(u,{language:"javascript"},{default:d(()=>[...e[4]||(e[4]=[t("pre",null,`        var select = new SlimSelect({
          select: '#selectElement'
        })
        select.destroy()
      `,-1)])]),_:1})])}const W=h(T,[["render",A]]),I=p({name:"EnableDisable",data(){return{setEnableSingle:null,setEnableMultiple:null}},mounted(){this.setEnableSingle=new r({select:this.$refs.setEnableSingle}),this.setEnableMultiple=new r({select:this.$refs.setEnableMultiple})},methods:{setEnable(){this.setEnableSingle.enable(),this.setEnableMultiple.enable()},setDisable(){this.setEnableSingle.disable(),this.setEnableMultiple.disable()}},components:{ShikiStyle:c}}),N={id:"enableDisable",class:"content"},B={class:"row"},H={ref:"setEnableSingle",disabled:""},L={ref:"setEnableMultiple",multiple:"",disabled:""};function P(l,e,v,g,m,S){const u=o("ShikiStyle");return i(),a("div",N,[e[5]||(e[5]=t("h2",{class:"header"},"enable / disable",-1)),e[6]||(e[6]=t("p",null," The enable and disable methods provide programmatic control over the SlimSelect instance's interactive state. These methods are essential for creating dynamic interfaces where dropdowns need to be temporarily unavailable based on user permissions, form validation, or other business logic conditions. ",-1)),e[7]||(e[7]=t("p",null," When disabled, the dropdown becomes non-interactive and visually indicates its disabled state. You can also set the disabled state directly on the original HTML select element, and SlimSelect will automatically detect and respect this state, ensuring consistency between the native element and the enhanced interface. ",-1)),t("div",B,[l.setEnableSingle&&l.setEnableSingle.settings.disabled?(i(),a("div",{key:0,class:"btn",onClick:e[0]||(e[0]=(...n)=>l.setEnable&&l.setEnable(...n))},"Enable")):(i(),a("div",{key:1,class:"btn",onClick:e[1]||(e[1]=(...n)=>l.setDisable&&l.setDisable(...n))},"Disable")),t("select",H,[...e[2]||(e[2]=[t("option",{value:"value1"},"Value 1",-1),t("option",{value:"value2"},"Value 2",-1),t("option",{value:"value3"},"Value 3",-1)])],512),t("select",L,[...e[3]||(e[3]=[t("option",{value:"value1"},"Value 1",-1),t("option",{value:"value2"},"Value 2",-1),t("option",{value:"value3"},"Value 3",-1)])],512)]),s(u,{language:"javascript"},{default:d(()=>[...e[4]||(e[4]=[t("pre",null,`        var select = new SlimSelect({
          select: '#selectElement'
        })
        select.enable()
        // or
        select.disable()
      `,-1)])]),_:1})])}const R=h(I,[["render",P]]),z=p({name:"GetData",data(){return{getDataOptions:null,getDataOptionsValue:[],getDataOptgroups:null,getDataOptgroupsValue:[]}},mounted(){this.getDataOptions=new r({select:this.$refs.getDataOptions}),this.getDataOptgroups=new r({select:this.$refs.getDataOptgroups})},methods:{getData(){this.getDataOptionsValue=this.getDataOptions.getData(),this.getDataOptgroupsValue=this.getDataOptgroups.getData()}},components:{ShikiStyle:c}}),J={id:"getData",class:"content"},U={class:"row"},Y={ref:"getDataOptions"},q={key:0,class:"pad-t-m pad-b-m"},F={ref:"getDataOptgroups",multiple:""},Q={key:0,class:"pad-t-m pad-b-m"};function X(l,e,v,g,m,S){const u=o("ShikiStyle");return i(),a("div",J,[e[6]||(e[6]=t("h2",{class:"header"},"getData",-1)),e[7]||(e[7]=t("p",null," The getData method retrieves the complete data structure currently loaded in the SlimSelect instance, including all options and optgroups. This is useful for debugging, data analysis, or when you need to access the full dataset for processing or manipulation. ",-1)),e[8]||(e[8]=t("p",null," This method returns the raw data objects with all their properties, allowing you to access not just the display values but also any additional data attached to each option, such as custom attributes, metadata, or configuration options that were set when the data was loaded. ",-1)),t("div",U,[t("div",{class:"btn",onClick:e[0]||(e[0]=(...n)=>l.getData&&l.getData(...n))},"Get Data"),t("div",null,[t("select",Y,[...e[1]||(e[1]=[t("option",{value:"value1"},"Value 1",-1),t("option",{value:"value2"},"Value 2",-1),t("option",{value:"value3"},"Value 3",-1)])],512),l.getDataOptionsValue.length?(i(),a("div",q,[e[2]||(e[2]=t("b",null,"Option Data:",-1)),f(" "+$(l.getDataOptionsValue),1)])):b("",!0)]),t("div",null,[t("select",F,[...e[3]||(e[3]=[w('<optgroup label="Group 1"><option value="value1">Value 1</option><option value="value2">Value 2</option><option value="value3">Value 3</option></optgroup><optgroup label="Group 2"><option value="value4">Value 4</option><option value="value5">Value 5</option><option value="value6">Value 6</option></optgroup>',2)])],512),l.getDataOptgroupsValue.length?(i(),a("div",Q,[e[4]||(e[4]=t("b",null,"Optgroup Data:",-1)),f(" "+$(l.getDataOptgroupsValue),1)])):b("",!0)])]),s(u,{language:"javascript"},{default:d(()=>[...e[5]||(e[5]=[t("pre",null,`        var select = new SlimSelect({
          select: '#selectElement'
        })
        var data = select.getData() // Will return an array of options and optgroups
        console.log(data)
      `,-1)])]),_:1})])}const Z=h(z,[["render",X]]),x=p({name:"GetSelected",data(){return{selectedSingle:null,selectedSingleValue:[],selectedMultiple:null,selectedMultipleValue:[],selectedKeepOrder:null,selectedKeepOrderValue:[]}},mounted(){this.selectedSingle=new r({select:this.$refs.selectedSingle}),this.selectedMultiple=new r({select:this.$refs.selectedMultiple}),this.selectedKeepOrder=new r({select:this.$refs.selectedKeepOrder,settings:{keepOrder:!0}}),this.selectedKeepOrder.setSelected(["value3","value1"])},methods:{getSelected(){this.selectedSingleValue=this.selectedSingle.getSelected(),this.selectedMultipleValue=this.selectedMultiple.getSelected(),this.selectedKeepOrderValue=this.selectedKeepOrder.getSelected()}},components:{ShikiStyle:c}}),ee={id:"getSelected",class:"content"},te={class:"row"},le={ref:"selectedSingle"},se={key:0,class:"pad-t-m pad-b-m"},ne={ref:"selectedMultiple",multiple:""},oe={key:0,class:"pad-t-m pad-b-m"},ae={ref:"selectedKeepOrder",multiple:""},ie={key:0,class:"pad-t-m pad-b-m"};function re(l,e,v,g,m,S){const u=o("ShikiStyle");return i(),a("div",ee,[e[8]||(e[8]=w('<h2 class="header">getSelected</h2><p> The getSelected method retrieves the currently selected values from the SlimSelect instance, returning them as an array of strings. This is essential for form processing, data validation, and any scenario where you need to access the user&#39;s current selections programmatically. </p><p> Whether you&#39;re working with single-select or multi-select dropdowns, this method provides a consistent interface for accessing selected values, making it easy to integrate SlimSelect with form handling, API calls, or other application logic that depends on user selections. </p><div class="alert info"> Whether or not its a single or multiple select, getSelected will always return an array. </div><div class="alert"><p><strong>Multi-Select Order:</strong></p><ul><li><code>keepOrder: false</code> (default) → Returns in <strong>DOM order</strong> (how options appear in HTML) </li><li><code>keepOrder: true</code> → Returns in <strong>selection order</strong> (order you clicked them)</li></ul></div>',5)),t("div",te,[t("div",{class:"btn",onClick:e[0]||(e[0]=(...n)=>l.getSelected&&l.getSelected(...n))},"Get Selected"),t("div",null,[t("select",le,[...e[1]||(e[1]=[t("option",{value:"value1"},"Value 1",-1),t("option",{value:"value2"},"Value 2",-1),t("option",{value:"value3"},"Value 3",-1)])],512),l.selectedSingleValue.length?(i(),a("div",se,[e[2]||(e[2]=t("b",null,"Single Select Value:",-1)),f(" "+$(l.selectedSingleValue),1)])):b("",!0)]),t("div",null,[t("select",ne,[...e[3]||(e[3]=[t("option",{value:"value1"},"Value 1",-1),t("option",{value:"value2",selected:""},"Value 2",-1),t("option",{value:"value3",selected:""},"Value 3",-1)])],512),l.selectedMultipleValue.length?(i(),a("div",oe,[e[4]||(e[4]=t("b",null,"Multi Select Value:",-1)),f(" "+$(l.selectedMultipleValue),1)])):b("",!0)]),t("div",null,[t("select",ae,[...e[5]||(e[5]=[t("option",{value:"value1"},"Value 1",-1),t("option",{value:"value2"},"Value 2",-1),t("option",{value:"value3"},"Value 3",-1)])],512),l.selectedKeepOrderValue.length?(i(),a("div",ie,[e[6]||(e[6]=t("b",null,"Keep Order Value:",-1)),f(" "+$(l.selectedKeepOrderValue),1)])):b("",!0)])]),s(u,{language:"javascript"},{default:d(()=>[...e[7]||(e[7]=[t("pre",null,`        var select = new SlimSelect({
          select: '#selectElement'

          // Optional - If you want to keep the order of the selected values
          // settings: { keepOrder: true }
        })
        var values = select.getSelected() // Will return an array of strings
        console.log(values)
      `,-1)])]),_:1})])}const ue=h(x,[["render",re]]),de=p({name:"OpenClose",data(){return{openCloseSingle:null,openCloseMultiple:null}},mounted(){this.openCloseSingle=new r({select:this.$refs.openCloseSingle}),this.openCloseMultiple=new r({select:this.$refs.openCloseMultiple})},methods:{toggleOpenClose(){this.openCloseSingle.settings.isOpen?(this.openCloseSingle.close(),this.openCloseMultiple.close()):(this.openCloseSingle.open(),this.openCloseMultiple.open())}},components:{ShikiStyle:c}}),pe={id:"openClose",class:"content"},ce={class:"row"},he={ref:"openCloseSingle"},ve={ref:"openCloseMultiple",multiple:""};function ge(l,e,v,g,m,S){const u=o("ShikiStyle");return i(),a("div",pe,[e[4]||(e[4]=t("h2",{class:"header"},"open / close",-1)),e[5]||(e[5]=t("p",null," The open and close methods provide programmatic control over the dropdown's visibility state. These methods are essential for creating custom interactions, implementing keyboard navigation, or building complex user interfaces where you need to control when the dropdown appears or disappears. ",-1)),e[6]||(e[6]=t("p",null," The open method displays the dropdown options and search interface, while the close method hides them. This is particularly useful for implementing custom triggers, creating keyboard shortcuts, or integrating SlimSelect with other UI components that need to control the dropdown's state programmatically. ",-1)),t("div",ce,[t("div",{class:"btn",onClick:e[0]||(e[0]=n=>l.toggleOpenClose())},"Open/Close"),t("select",he,[...e[1]||(e[1]=[t("option",{value:"value1"},"Value 1",-1),t("option",{value:"value2"},"Value 2",-1),t("option",{value:"value3"},"Value 3",-1)])],512),t("select",ve,[...e[2]||(e[2]=[t("option",{value:"value1"},"Value 1",-1),t("option",{value:"value2"},"Value 2",-1),t("option",{value:"value3"},"Value 3",-1)])],512)]),s(u,{language:"javascript"},{default:d(()=>[...e[3]||(e[3]=[t("pre",null,`        var select = new SlimSelect({
          select: '#selectElement',
        })
        select.open()
        // or
        select.close()
      `,-1)])]),_:1})])}const me=h(de,[["render",ge]]),Se=p({name:"Search",data(){return{searchSingle:null,searchMultiple:null}},mounted(){this.searchSingle=new r({select:this.$refs.searchSingle}),this.searchMultiple=new r({select:this.$refs.searchMultiple})},methods:{setSearch(){this.searchSingle.open(),this.searchSingle.search("value 2"),this.searchMultiple.open(),this.searchMultiple.search("value 2")}},components:{ShikiStyle:c}}),fe={id:"search",class:"content"},ye={class:"row"},be={ref:"searchSingle"},$e={ref:"searchMultiple",multiple:""};function we(l,e,v,g,m,S){const u=o("ShikiStyle");return i(),a("div",fe,[e[4]||(e[4]=t("h2",{class:"header"},"search",-1)),e[5]||(e[5]=t("p",null," The search method allows you to programmatically set the search input value and filter the dropdown options accordingly. This is particularly useful for implementing custom search functionality, pre-filtering options based on external conditions, or creating advanced search interfaces that go beyond the default search behavior. ",-1)),e[6]||(e[6]=t("p",null," When called, this method updates the search input field and immediately applies the search filter to the available options, showing only those that match the search criteria. This is essential for creating responsive search experiences where the search term can be set programmatically based on user interactions or external data. ",-1)),t("div",ye,[t("div",{class:"btn",onClick:e[0]||(e[0]=n=>l.setSearch())},"Set Search"),t("select",be,[...e[1]||(e[1]=[t("option",{value:"value1"},"Value 1",-1),t("option",{value:"value2"},"Value 2",-1),t("option",{value:"value3"},"Value 3",-1)])],512),t("select",$e,[...e[2]||(e[2]=[t("option",{value:"value1"},"Value 1",-1),t("option",{value:"value2"},"Value 2",-1),t("option",{value:"value3"},"Value 3",-1)])],512)]),s(u,{language:"javascript"},{default:d(()=>[...e[3]||(e[3]=[t("pre",null,`        var select = new SlimSelect({
          select: '#selectElement'
        })
        select.search('value')
      `,-1)])]),_:1})])}const Ve=h(Se,[["render",we]]),De=p({name:"SetData",data(){return{setDataSingle:null,setDataMultiple:null}},mounted(){this.setDataSingle=new r({select:this.$refs.setDataSingle,events:{error:l=>{console.error(l)}}}),this.setDataMultiple=new r({select:this.$refs.setDataMultiple,events:{error:l=>{console.error(l)}}})},methods:{setData(){fetch("https://api.gofakeit.com/json",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({type:"array",rowcount:10,indent:!1,fields:[{name:"text",function:"generate",params:{str:"{firstname} {lastname}"}},{name:"selected",function:"bool"}]})}).then(l=>l.json()).then(l=>{this.setDataSingle.setData(l),this.setDataMultiple.setData(l)}).catch(l=>console.error(l))}},components:{ShikiStyle:c}}),ke={id:"setData",class:"content"},Oe={class:"alert info"},Me={class:"row"},Ce={ref:"setDataSingle"},Ee={ref:"setDataMultiple",multiple:""};function Te(l,e,v,g,m,S){const u=o("router-link"),n=o("ShikiStyle");return i(),a("div",ke,[e[4]||(e[4]=t("h2",{class:"header"},"setData",-1)),e[5]||(e[5]=t("p",null," The setData method allows you to dynamically update the options available in a SlimSelect instance by providing a new array of data objects. This is essential for creating responsive interfaces where the available options change based on user interactions, API responses, or other dynamic conditions. ",-1)),e[6]||(e[6]=t("p",null," When called, this method completely replaces the existing options and re-renders the SlimSelect interface, making it perfect for scenarios like dependent dropdowns, filtered lists, or any situation where the available choices need to be updated dynamically without recreating the entire component. ",-1)),e[7]||(e[7]=t("div",{class:"alert info"}," If you use a single select but an option is not selected it will select the first option. ",-1)),e[8]||(e[8]=t("div",{class:"alert info"}," If you use a single select but pass in data with multiple selected options, the first option will be selected. ",-1)),t("div",Oe,[e[2]||(e[2]=f(" To get a better break down of possible data options see ",-1)),s(u,{to:"/data#types"},{default:d(()=>[...e[1]||(e[1]=[f("data",-1)])]),_:1})]),t("div",Me,[t("div",{class:"btn",onClick:e[0]||(e[0]=(...y)=>l.setData&&l.setData(...y))},"Set Data"),t("select",Ce,null,512),t("select",Ee,null,512)]),s(n,{language:"javascript"},{default:d(()=>[...e[3]||(e[3]=[t("pre",null,`        var select = new SlimSelect({
          select: '#selectElement'
        })

        // Array of objects
        select.setData([
          {text: 'Value 1', value: 'value1'},
          {text: 'Value 2', value: 'value2'},
          {
            label: 'Group 1',
            options: [
              {text: 'Value 3', value: 'value3'},
              {text: 'Value 4', value: 'value4'},
            ]
          }
        ])
      `,-1)])]),_:1})])}const _e=h(De,[["render",Te]]),Ke=p({name:"SetSelected",data(){return{selectedSingle:null,selectedMultiple:null,selectedKeepOrder:null}},mounted(){this.selectedSingle=new r({select:this.$refs.selectedSingle}),this.selectedMultiple=new r({select:this.$refs.selectedMultiple}),this.selectedKeepOrder=new r({select:this.$refs.selectedKeepOrder,settings:{keepOrder:!0}})},methods:{setSelected(){this.selectedSingle.open(),this.selectedSingle.setSelected("value2"),this.selectedMultiple.open(),this.selectedMultiple.setSelected(["value1","value3"]),this.selectedKeepOrder.open(),this.selectedKeepOrder.setSelected(["value3","value1"]),setTimeout(()=>{this.selectedSingle.close(),this.selectedMultiple.close(),this.selectedKeepOrder.close()},2e3)}},components:{ShikiStyle:c}}),je={id:"setSelected",class:"content"},Ge={class:"row"},Ae={ref:"selectedSingle"},We={ref:"selectedMultiple",multiple:""},Ie={ref:"selectedKeepOrder",multiple:""};function Ne(l,e,v,g,m,S){const u=o("ShikiStyle");return i(),a("div",je,[e[5]||(e[5]=t("h2",{class:"header"},"setSelected",-1)),e[6]||(e[6]=t("p",null," The setSelected method allows you to programmatically set the selected values in a SlimSelect instance. This is particularly useful for initializing selections, responding to external events, or implementing complex selection logic based on other application state. ",-1)),e[7]||(e[7]=t("p",null," The method accepts either a single string value or an array of strings, making it flexible for both single-select and multi-select scenarios. Additionally, you can control whether the afterChange event is triggered by providing a second boolean parameter, giving you fine-grained control over when selection events fire. ",-1)),t("div",Ge,[t("div",{class:"btn",onClick:e[0]||(e[0]=(...n)=>l.setSelected&&l.setSelected(...n))},"Set Selected"),t("select",Ae,[...e[1]||(e[1]=[t("option",{value:"value1"},"Value 1",-1),t("option",{value:"value2"},"Value 2",-1),t("option",{value:"value3"},"Value 3",-1)])],512),t("select",We,[...e[2]||(e[2]=[t("option",{value:"value1"},"Value 1",-1),t("option",{value:"value2"},"Value 2",-1),t("option",{value:"value3"},"Value 3",-1)])],512),t("select",Ie,[...e[3]||(e[3]=[t("option",{value:"value1"},"Value 1",-1),t("option",{value:"value2"},"Value 2",-1),t("option",{value:"value3"},"Value 3",-1)])],512)]),s(u,{language:"javascript"},{default:d(()=>[...e[4]||(e[4]=[t("pre",null,`        var select = new SlimSelect({
          select: '#selectElement'

          // Optional - If you want to keep the order of the selected values
          // settings: { keepOrder: true }
        })
        select.setSelected('value1' /* or */ ['value1', 'value3'])
        console.log(select.getSelected())

        // To not trigger the afterChange callback
        select.setSelected('value1', false)
      `,-1)])]),_:1})])}const Be=h(Ke,[["render",Ne]]),He=p({name:"Methods",components:{ShikiStyle:c,AdSlot:E,GetSelected:ue,SetSelected:Be,GetData:Z,SetData:_e,EnableDisable:R,OpenClose:me,Search:Ve,Destroy:W}}),Le={id:"methods",class:"contents"};function Pe(l,e,v,g,m,S){const u=o("GetSelected"),n=o("SetSelected"),y=o("AdSlot"),V=o("GetData"),D=o("SetData"),k=o("EnableDisable"),O=o("OpenClose"),M=o("Search"),C=o("Destroy");return i(),a("div",Le,[s(u),s(n),s(y,{"ad-slot":"1270131515"}),s(V),s(D),s(y,{"ad-slot":"1270131515"}),s(k),s(O),s(y,{"ad-slot":"1270131515"}),s(M),s(C)])}const ze=h(He,[["render",Pe]]);export{ze as default};
