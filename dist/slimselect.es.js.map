{"version":3,"file":"slimselect.es.js","sources":["../src/slim-select/classes.ts","../src/slim-select/helpers.ts","../src/slim-select/store.ts","../src/slim-select/render.ts","../src/slim-select/select.ts","../src/slim-select/settings.ts","../src/slim-select/index.ts"],"sourcesContent":["export default class CssClasses {\n  public main: string\n  // Placeholder\n  public placeholder: string\n\n  // Values\n  public values: string\n  public single: string\n  public max: string\n  public value: string\n  public valueText: string\n  public valueDelete: string\n  public valueOut: string\n\n  // Deselect\n  public deselect: string\n  public deselectPath: string // Not a class but whatever\n\n  // Arrow\n  public arrow: string\n  public arrowClose: string // Not a class but whatever\n  public arrowOpen: string // Not a class but whatever\n\n  // Content\n  public content: string\n  public contentOpen: string\n  public dirAbove: string\n  public dirBelow: string\n\n  // Search\n  public search: string\n  public searchHighlighter: string\n  public searching: string\n  public addable: string\n  public addablePath: string // Not a class but whatever\n\n  // List optgroups/options\n  public list: string\n\n  // Optgroup\n  public optgroup: string\n  public optgroupLabel: string\n  public optgroupLabelText: string\n  public optgroupActions: string\n  public optgroupSelectAll: string // optgroup select all\n  public optgroupSelectAllBox: string // Not a class but whatever\n  public optgroupSelectAllCheck: string // Not a class but whatever\n  public optgroupClosable: string\n\n  // Option\n  public option: string\n  public optionDelete: string // Not a class but whatever\n  public highlighted: string\n\n  // Misc\n  public mainOpen: string\n  public close: string\n  public selected: string\n  public error: string\n  public disabled: string\n  public hide: string\n\n  constructor(classes?: Partial<CssClasses>) {\n    if (!classes) {\n      classes = {}\n    }\n\n    this.main = classes.main || 'ss-main'\n    this.placeholder = classes.placeholder || 'ss-placeholder'\n    this.values = classes.values || 'ss-values'\n    this.single = classes.single || 'ss-single'\n    this.max = classes.max || 'ss-max'\n    this.value = classes.value || 'ss-value'\n    this.valueText = classes.valueText || 'ss-value-text'\n    this.valueDelete = classes.valueDelete || 'ss-value-delete'\n    this.valueOut = classes.valueOut || 'ss-value-out'\n\n    this.deselect = classes.deselect || 'ss-deselect'\n    this.deselectPath = classes.deselectPath || 'M10,10 L90,90 M10,90 L90,10'\n    this.arrow = classes.arrow || 'ss-arrow'\n    this.arrowClose = classes.arrowClose || 'M10,30 L50,70 L90,30'\n    this.arrowOpen = classes.arrowOpen || 'M10,70 L50,30 L90,70'\n    this.content = classes.content || 'ss-content'\n    this.contentOpen = classes.contentOpen || 'ss-open'\n    this.dirAbove = classes.dirAbove || 'ss-dir-above'\n    this.dirBelow = classes.dirBelow || 'ss-dir-below'\n    this.search = classes.search || 'ss-search'\n    this.searchHighlighter = classes.searchHighlighter || 'ss-search-highlight'\n    this.searching = classes.searching || 'ss-searching'\n    this.addable = classes.addable || 'ss-addable'\n    this.addablePath = classes.addablePath || 'M50,10 L50,90 M10,50 L90,50'\n    this.list = classes.list || 'ss-list'\n    this.optgroup = classes.optgroup || 'ss-optgroup'\n    this.optgroupLabel = classes.optgroupLabel || 'ss-optgroup-label'\n    this.optgroupLabelText = classes.optgroupLabelText || 'ss-optgroup-label-text'\n    this.optgroupActions = classes.optgroupActions || 'ss-optgroup-actions'\n    this.optgroupSelectAll = classes.optgroupSelectAll || 'ss-selectall'\n    this.optgroupSelectAllBox = classes.optgroupSelectAllBox || 'M60,10 L10,10 L10,90 L90,90 L90,50'\n    this.optgroupSelectAllCheck = classes.optgroupSelectAllCheck || 'M30,45 L50,70 L90,10'\n    this.optgroupClosable = classes.optgroupClosable || 'ss-closable'\n    this.option = classes.option || 'ss-option'\n    this.optionDelete = classes.optionDelete || 'M10,10 L90,90 M10,90 L90,10'\n    this.highlighted = classes.highlighted || 'ss-highlighted'\n    this.mainOpen = classes.mainOpen || 'ss-open'\n    this.close = classes.close || 'ss-close'\n    this.selected = classes.selected || 'ss-selected'\n    this.error = classes.error || 'ss-error'\n    this.disabled = classes.disabled || 'ss-disabled'\n    this.hide = classes.hide || 'ss-hide'\n  }\n}\n","// Generate an 8 character random string\nexport function generateID(): string {\n  return Math.random().toString(36).substring(2, 10)\n}\n\nexport function hasClassInTree(element: HTMLElement, className: string): HTMLElement | null {\n  function hasClass(e: HTMLElement, c: string) {\n    // If the element has the class return element\n    if (c && e && e.classList && e.classList.contains(c)) {\n      return e\n    }\n\n    // If the element has a dataset id of the class return element\n    if (c && e && e.dataset && e.dataset.id && e.dataset.id === className) {\n      return e\n    }\n\n    return null\n  }\n\n  function parentByClass(e: any, c: string): any {\n    if (!e || e === (document as any)) {\n      return null\n    } else if (hasClass(e, c)) {\n      return e\n    } else {\n      return parentByClass(e.parentNode, c)\n    }\n  }\n\n  return hasClass(element, className) || parentByClass(element, className)\n}\n\n// debounce will call the last requested function after the wait time\nexport function debounce<T extends (...args: any[]) => void>(func: T, wait = 50, immediate = false): () => void {\n  let timeout: any\n  return function (this: any, ...args: any[]): void {\n    const context = self\n    const later = () => {\n      timeout = null\n      if (!immediate) {\n        func.apply(context, args)\n      }\n    }\n    const callNow = immediate && !timeout\n    clearTimeout(timeout)\n    timeout = setTimeout(later, wait)\n    if (callNow) {\n      func.apply(context, args)\n    }\n  }\n}\n\nexport function isEqual(a: any, b: any): boolean {\n  return JSON.stringify(a) === JSON.stringify(b)\n}\n\nexport function kebabCase(str: string): string {\n  const result = str.replace(/[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g, (match) => '-' + match.toLowerCase())\n  return str[0] === str[0].toUpperCase() ? result.substring(1) : result\n}\n","import { generateID } from './helpers'\n\ntype selectType = 'single' | 'multiple'\n\nexport class Option {\n  id: string\n  value: string\n  text: string\n  html: string\n  defaultSelected: boolean\n  selected: boolean\n  display: boolean\n  disabled: boolean\n  placeholder: boolean\n  class: string\n  style: string\n  data: { [key: string]: string }\n  mandatory: boolean\n\n  constructor(option: Partial<Option>) {\n    this.id = !option.id || option.id === '' ? generateID() : option.id\n    this.value = option.value === undefined ? option.text || '' : option.value || ''\n    this.text = option.text || ''\n    this.html = option.html || ''\n    this.defaultSelected = option.defaultSelected !== undefined ? option.defaultSelected : false\n    this.selected = option.selected !== undefined ? option.selected : false\n    this.display = option.display !== undefined ? option.display : true\n    this.disabled = option.disabled !== undefined ? option.disabled : false\n    this.mandatory = option.mandatory !== undefined ? option.mandatory : false\n    this.placeholder = option.placeholder !== undefined ? option.placeholder : false\n    this.class = option.class || ''\n    this.style = option.style || ''\n    this.data = option.data || {}\n  }\n}\nexport class Optgroup {\n  public id: string\n  public label: string\n  public selectAll: boolean\n  public selectAllText: string\n  public closable: 'off' | 'open' | 'close'\n  public options: Partial<Option>[]\n\n  constructor(optgroup: Partial<Optgroup>) {\n    this.id = !optgroup.id || optgroup.id === '' ? generateID() : optgroup.id\n    this.label = optgroup.label || ''\n    this.selectAll = optgroup.selectAll === undefined ? false : optgroup.selectAll\n    this.selectAllText = optgroup.selectAllText || 'Select All'\n    this.closable = optgroup.closable || 'off'\n\n    // If options exist, loop through options and create new option class\n    // and set the options to the optgroup options field\n    this.options = []\n    if (optgroup.options) {\n      for (const o of optgroup.options) {\n        this.options.push(new Option(o))\n      }\n    }\n  }\n}\n\nexport default class Store {\n  private selectType: selectType = 'single'\n\n  // Main data set, never null\n  private data: (Option | Optgroup)[] = []\n  private selectedOrder: string[] = []\n\n  constructor(type: selectType, data: (Partial<Option> | Partial<Optgroup>)[]) {\n    this.selectType = type\n    this.setData(data)\n  }\n\n  // Validate DataArrayPartial\n  public validateDataArray(data: (Partial<Option> | Partial<Optgroup>)[]): Error | null {\n    if (!Array.isArray(data)) {\n      return new Error('Data must be an array')\n    }\n\n    // Loop through each data object\n    for (let dataObj of data) {\n      if (!dataObj) continue\n\n      // Optgroup\n      if (dataObj instanceof Optgroup || 'label' in dataObj) {\n        if (!('label' in dataObj)) {\n          return new Error('Optgroup must have a label')\n        }\n\n        if ('options' in dataObj && dataObj.options) {\n          for (let option of dataObj.options) {\n            const validationError = this.validateOption(option)\n            if (validationError) {\n              return validationError\n            }\n          }\n        }\n      } else if (dataObj instanceof Option || 'text' in dataObj) {\n        const validationError = this.validateOption(dataObj)\n        if (validationError) {\n          return validationError\n        }\n      } else {\n        return new Error('Data object must be a valid optgroup or option')\n      }\n    }\n\n    return null\n  }\n\n  // Validate Option\n  public validateOption(option: Partial<Option>): Error | null {\n    if (!('text' in option)) {\n      return new Error('Option must have a text')\n    }\n\n    return null\n  }\n\n  public partialToFullData(data: (Partial<Option> | Partial<Optgroup>)[]): (Option | Optgroup)[] {\n    let dataFinal: (Option | Optgroup)[] = []\n    data.forEach((dataObj) => {\n      if (!dataObj) return\n\n      // Optgroup\n      if (dataObj instanceof Optgroup || 'label' in dataObj) {\n        let optOptions: Option[] = []\n        if ('options' in dataObj && dataObj.options) {\n          dataObj.options.forEach((option: Partial<Option>) => {\n            optOptions.push(new Option(option))\n          })\n        }\n\n        if (optOptions.length > 0) {\n          dataFinal.push(new Optgroup(dataObj as Partial<Optgroup>))\n        }\n      }\n\n      // Option\n      if (dataObj instanceof Option || 'text' in dataObj) {\n        dataFinal.push(new Option(dataObj as Partial<Option>))\n      }\n    })\n\n    return dataFinal\n  }\n\n  public setData(data: (Partial<Option> | Partial<Optgroup>)[], preserveSelected: boolean = false) {\n    // Convert new data to full data array\n    const newData = this.partialToFullData(data)\n\n    if (preserveSelected) {\n      // Get currently selected options before updating data\n      const selectedOptions = this.getSelectedOptions()\n\n      // Check which selected options are missing from new data\n      const missingSelected: (Option | Optgroup)[] = []\n      selectedOptions.forEach((selectedOption) => {\n        let found = false\n\n        // Check if this selected option exists in new data\n        for (const newItem of newData) {\n          if (newItem instanceof Option && newItem.id === selectedOption.id) {\n            found = true\n            break\n          }\n          if (newItem instanceof Optgroup) {\n            for (const opt of newItem.options) {\n              if (opt.id === selectedOption.id) {\n                found = true\n                break\n              }\n            }\n          }\n        }\n\n        if (!found) {\n          missingSelected.push(selectedOption)\n        }\n      })\n\n      // Add missing selected options to the beginning of the data\n      this.data = [...missingSelected, ...newData]\n    } else {\n      this.data = newData\n    }\n\n    // Run this.data through setSelected by value\n    // to set the selected property and clean any wrong selected\n    if (this.selectType === 'single') {\n      this.setSelectedBy('id', this.getSelected())\n    }\n  }\n\n  // Get data will return all the data\n  public getData(): Option[] | Optgroup[] {\n    return this.filter(null, true) as Option[] | Optgroup[]\n  }\n\n  // Get data options will return the data as a\n  // flat array of just options\n  public getDataOptions(): Option[] {\n    return this.filter(null, false) as Option[]\n  }\n\n  public addOption(option: Partial<Option>, addToStart: boolean = false) {\n    if (addToStart) {\n      let data = [new Option(option)] as (Option | Optgroup)[]\n      this.setData(data.concat(this.getData()))\n    } else {\n      this.setData(this.getData().concat(new Option(option)))\n    }\n  }\n\n  // Pass in an array of id that will loop through\n  // each option and set the selected property to true\n  // but also clean selected by determining selectType\n  public setSelectedBy(selectedType: 'id' | 'value', selectedValues: string[]) {\n    let firstOption: Partial<Option> | null = null\n    let hasSelected = false\n    const selectedObjects: Partial<Option>[] = []\n\n    for (let dataObj of this.data) {\n      // Optgroup\n      if (dataObj instanceof Optgroup) {\n        for (let option of dataObj.options as Partial<Option>[]) {\n          if (!firstOption) {\n            firstOption = option\n          }\n\n          let optionValue = option[selectedType] || ''\n          option.selected = hasSelected ? false : selectedValues.includes(optionValue)\n\n          // If the option is selected, set hasSelected to true\n          // for single based selects\n          if (option.selected) {\n            selectedObjects.push(option)\n\n            if (this.selectType === 'single') {\n              hasSelected = true\n            }\n          }\n        }\n      }\n\n      // Option\n      if (dataObj instanceof Option) {\n        if (!firstOption) {\n          firstOption = dataObj\n        }\n\n        dataObj.selected = hasSelected ? false : selectedValues.includes(dataObj[selectedType])\n\n        // If the option is selected, set hasSelected to true\n        // for single based selects\n        if (dataObj.selected) {\n          selectedObjects.push(dataObj)\n\n          if (this.selectType === 'single') {\n            hasSelected = true\n          }\n        }\n      }\n    }\n\n    // If no options are selected, select the first option\n    if (this.selectType === 'single' && firstOption && !hasSelected) {\n      firstOption.selected = true\n      selectedObjects.push(firstOption)\n    }\n\n    // Put together a list of selected ids in the order of the selected values\n    const selectedIds = selectedValues.map((value) => {\n      return selectedObjects.find((option) => option[selectedType] === value)?.id || ''\n    })\n\n    this.selectedOrder = selectedIds\n  }\n\n  public getSelected(): string[] {\n    return this.getSelectedOptions().map((option) => option.id)\n  }\n\n  public getSelectedValues(): string[] {\n    return this.getSelectedOptions().map((option) => option.value)\n  }\n\n  public getSelectedOptions(): Option[] {\n    return this.filter((opt: Option) => {\n      return opt.selected\n    }, false) as Option[]\n  }\n\n  public getOptgroupByID(id: string): Optgroup | null {\n    // Loop through each data object\n    // and if optgroup is found, return it\n    for (let dataObj of this.data) {\n      if (dataObj instanceof Optgroup && dataObj.id === id) {\n        return dataObj\n      }\n    }\n\n    return null\n  }\n\n  public getOptionByID(id: string): Option | null {\n    let options = this.filter((opt: Option) => {\n      return opt.id === id\n    }, false) as Option[]\n\n    return options.length ? options[0] : null\n  }\n\n  public getSelectType(): string {\n    return this.selectType\n  }\n\n  public getFirstOption(): Option | null {\n    let option: Option | null = null\n    for (let dataObj of this.data) {\n      if (dataObj instanceof Optgroup) {\n        option = dataObj.options[0] as Option\n      } else if (dataObj instanceof Option) {\n        option = dataObj\n      }\n\n      if (option) {\n        break\n      }\n    }\n    return option\n  }\n\n  // Take in search string and return filtered list of values\n  public search(search: string, searchFilter: (opt: Option, search: string) => boolean): (Option | Optgroup)[] {\n    search = search.trim()\n\n    // If search is empty, return all data\n    if (search === '') {\n      return this.getData()\n    }\n\n    // Run filter with search function\n    return this.filter((opt: Option): boolean => {\n      return searchFilter(opt, search)\n    }, true)\n  }\n\n  // Filter takes in a function that will be used to filter the data\n  // This will also keep optgroups of sub options meet the filter requirements\n  public filter(filter: { (opt: Option): boolean } | null, includeOptgroup: boolean): (Option | Optgroup)[] {\n    const dataSearch: (Option | Optgroup)[] = []\n    this.data.forEach((dataObj: Option | Optgroup) => {\n      // Optgroup\n      if (dataObj instanceof Optgroup) {\n        let optOptions: Option[] = []\n        let options = dataObj.options as Option[]\n        options.forEach((option: Option) => {\n          if (!filter || filter(option as Option)) {\n            // If you dont want to include optgroups\n            // just push to the dataSearch array\n            if (!includeOptgroup) {\n              dataSearch.push(new Option(option))\n            } else {\n              optOptions.push(new Option(option))\n            }\n          }\n        })\n\n        // If we pushed any options to the optOptions array\n        // push the optgroup to the dataSearch array\n        if (optOptions.length > 0) {\n          // Create new optgroup with the new options\n          let optgroup = new Optgroup(dataObj)\n          optgroup.options = optOptions\n\n          // Push optgroup to dataSearch\n          dataSearch.push(optgroup)\n        }\n      }\n\n      // Option\n      if (dataObj instanceof Option) {\n        if (!filter || filter(dataObj)) {\n          dataSearch.push(new Option(dataObj))\n        }\n      }\n    })\n\n    return dataSearch\n  }\n\n  // Take in an array of options and reoder them based upon the selected order\n  public selectedOrderOptions(options: Option[]): Option[] {\n    const newOrder: Option[] = []\n    this.selectedOrder.forEach((id) => {\n      const option = options.find((opt) => opt.id === id)\n      if (option) {\n        newOrder.push(option)\n      }\n    })\n\n    // add any remaining options that were not in the selected order\n    options.forEach((option) => {\n      let isIn = false\n      newOrder.forEach((selectedOption) => {\n        if (option.id === selectedOption.id) {\n          isIn = true\n\n          return\n        }\n      })\n\n      if (!isIn) {\n        newOrder.push(option)\n      }\n    })\n\n    return newOrder\n  }\n}\n","import { debounce } from './helpers'\nimport Settings from './settings'\nimport Store, { Optgroup, Option } from './store'\nimport CssClasses from './classes'\n\nexport interface Callbacks {\n  open: () => void\n  close: () => void\n  addable?: (\n    value: string\n  ) => Promise<Partial<Option> | string> | Partial<Option> | string | false | undefined | null | Error\n  setSelected: (value: string | string[], runAfterChange: boolean) => void\n  addOption: (option: Option) => void\n  search: (search: string) => void\n  beforeChange?: (newVal: Option[], oldVal: Option[]) => boolean | void\n  afterChange?: (newVal: Option[]) => void\n}\n\nexport interface Main {\n  main: HTMLDivElement\n  values: HTMLDivElement\n  deselect: {\n    main: HTMLDivElement\n    svg: SVGSVGElement\n    path: SVGPathElement\n  }\n  arrow: {\n    main: SVGSVGElement\n    path: SVGPathElement\n  }\n}\n\nexport interface Content {\n  main: HTMLDivElement\n  search: Search\n  list: HTMLDivElement\n}\n\nexport interface Search {\n  main: HTMLDivElement\n  input: HTMLInputElement\n  addable?: {\n    main: HTMLDivElement\n    svg: SVGSVGElement\n    path: SVGPathElement\n  }\n}\n\nexport default class Render {\n  public settings: Settings\n  public store: Store\n  public callbacks: Callbacks\n  // Used to compute the range selection\n  private lastSelectedOption: Option | null\n\n  // Elements\n  public main: Main\n  public content: Content\n\n  // Classes\n  public classes: CssClasses\n\n  constructor(settings: Required<Settings>, classes: Required<CssClasses>, store: Store, callbacks: Callbacks) {\n    this.store = store\n    this.settings = settings\n    this.classes = classes\n    this.callbacks = callbacks\n    this.lastSelectedOption = null\n\n    this.main = this.mainDiv()\n    this.content = this.contentDiv()\n\n    // Add classes and styles to main/content\n    this.updateClassStyles()\n    this.updateAriaAttributes()\n\n    // Add content to the content location settings\n    if (this.settings.contentLocation) {\n      this.settings.contentLocation.appendChild(this.content.main)\n    }\n  }\n\n  // Remove disabled classes\n  public enable(): void {\n    // Remove disabled class\n    this.main.main.classList.remove(this.classes.disabled)\n    this.main.main.setAttribute('aria-disabled', 'false')\n\n    // Set search input to \"enabled\"\n    this.content.search.input.disabled = false\n  }\n\n  // Set disabled classes\n  public disable(): void {\n    // Add disabled class\n    this.main.main.classList.add(this.classes.disabled)\n    this.main.main.setAttribute('aria-disabled', 'true')\n\n    // Set search input to disabled\n    this.content.search.input.disabled = true\n  }\n\n  public open(): void {\n    this.main.arrow.path.setAttribute('d', this.classes.arrowOpen)\n    this.main.main.setAttribute('aria-expanded', 'true')\n\n    // Set direction class on both main and content (persists, never removed)\n    const isAbove = this.settings.openPosition === 'up'\n    const dirClass = isAbove ? this.classes.dirAbove : this.classes.dirBelow\n    this.main.main.classList.add(dirClass)\n    this.content.main.classList.add(dirClass)\n\n    // Add open class to content to trigger open animation\n    this.content.main.classList.add(this.classes.contentOpen)\n\n    // Make search visible to screen readers when opened\n    this.content.search.input.removeAttribute('aria-hidden')\n\n    // move the content in to the right location\n    this.moveContent()\n\n    // Move to last selected option\n    const selectedOptions = this.store.getSelectedOptions()\n    if (selectedOptions.length) {\n      const selectedId = selectedOptions[selectedOptions.length - 1].id\n      const selectedOption = this.content.list.querySelector('[data-id=\"' + selectedId + '\"]') as HTMLElement\n      if (selectedOption) {\n        this.ensureElementInView(this.content.list, selectedOption)\n      }\n    }\n  }\n\n  public close(): void {\n    this.main.main.setAttribute('aria-expanded', 'false')\n    this.main.arrow.path.setAttribute('d', this.classes.arrowClose)\n\n    // Remove open class from content to trigger close animation\n    // Direction class (dirAbove/dirBelow) persists to maintain correct transform-origin\n    this.content.main.classList.remove(this.classes.contentOpen)\n\n    // Hide search from screen readers when closed\n    this.content.search.input.setAttribute('aria-hidden', 'true')\n\n    // Clear active descendant when closed\n    this.main.main.removeAttribute('aria-activedescendant')\n  }\n\n  public updateClassStyles(): void {\n    // Clear all classes and styles\n    this.main.main.className = ''\n    this.main.main.removeAttribute('style')\n    this.content.main.className = ''\n    this.content.main.removeAttribute('style')\n\n    // Make sure main/content has its base class\n    this.main.main.classList.add(this.classes.main)\n    this.content.main.classList.add(this.classes.content)\n\n    // Add styles\n    if (this.settings.style !== '') {\n      this.main.main.style.cssText = this.settings.style\n      this.content.main.style.cssText = this.settings.style\n    }\n\n    // Add classes\n    if (this.settings.class.length) {\n      for (const c of this.settings.class) {\n        if (c.trim() !== '') {\n          this.main.main.classList.add(c.trim())\n          this.content.main.classList.add(c.trim())\n        }\n      }\n    }\n\n    // Misc classes\n    // Add content position class\n    if (this.settings.contentPosition === 'relative' || this.settings.contentPosition === 'fixed') {\n      this.content.main.classList.add('ss-' + this.settings.contentPosition)\n    }\n  }\n\n  public updateAriaAttributes() {\n    const listboxId = this.content.list.id\n\n    // Main combobox\n    this.main.main.role = 'combobox'\n    this.main.main.setAttribute('aria-haspopup', 'listbox')\n    this.main.main.setAttribute('aria-controls', listboxId)\n    this.main.main.setAttribute('aria-expanded', 'false')\n\n    this.content.list.setAttribute('role', 'listbox')\n    this.content.list.setAttribute('aria-label', this.settings.ariaLabel + ' listbox')\n\n    // Add aria-multiselectable for multiple selects\n    if (this.settings.isMultiple) {\n      this.content.list.setAttribute('aria-multiselectable', 'true')\n    }\n\n    // Search input should also control the listbox\n    this.content.search.input.setAttribute('aria-controls', listboxId)\n  }\n\n  public mainDiv(): Main {\n    // Create main container\n    const main = document.createElement('div')\n\n    // Add id to data-id\n    main.dataset.id = this.settings.id\n    // main.id = this.settings.id+'-main' // Remove for now as it is not needed and add duplicate id errors\n\n    // Add label\n    main.setAttribute('aria-label', this.settings.ariaLabel)\n\n    // Set tabable to allow tabbing to the element\n    main.tabIndex = 0\n\n    // Deal with keyboard events on the main div\n    // This is to allow for normal selecting\n    // when you may not have a search bar\n    main.onkeydown = (e: KeyboardEvent): boolean => {\n      // Convert above if else statemets to switch\n      switch (e.key) {\n        case 'ArrowUp':\n        case 'ArrowDown':\n          this.callbacks.open()\n          e.key === 'ArrowDown' ? this.highlight('down') : this.highlight('up')\n          return false\n        case 'Tab':\n          this.callbacks.close()\n          return true // Continue doing normal tabbing\n        case 'Enter':\n        case ' ':\n          this.callbacks.open()\n          const highlighted = this.content.list.querySelector('.' + this.classes.highlighted) as HTMLDivElement\n          if (highlighted) {\n            highlighted.click()\n          }\n          return false\n        case 'Escape':\n          this.callbacks.close()\n          return false\n      }\n\n      // Check if they type a-z, A-Z and 0-9\n      if (e.key.length === 1) {\n        this.callbacks.open()\n      }\n\n      return true\n    }\n\n    // Add onclick for main div\n    main.onclick = (e: Event): void => {\n      // Dont do anything if disabled\n      if (this.settings.disabled) {\n        return\n      }\n\n      this.settings.isOpen ? this.callbacks.close() : this.callbacks.open()\n    }\n\n    // Add values\n    const values = document.createElement('div')\n    values.classList.add(this.classes.values)\n    main.appendChild(values)\n\n    // Add deselect\n    const deselect = document.createElement('div')\n    deselect.classList.add(this.classes.deselect)\n\n    // Check if deselect is to be shown or not\n    const selectedOptions = this.store?.getSelectedOptions()\n    if (!this.settings.allowDeselect || (this.settings.isMultiple && selectedOptions && selectedOptions.length <= 0)) {\n      deselect.classList.add(this.classes.hide)\n    } else {\n      deselect.classList.remove(this.classes.hide)\n    }\n\n    // Add deselect onclick event\n    deselect.onclick = (e: Event) => {\n      e.stopPropagation()\n\n      // Dont do anything if disabled\n      if (this.settings.disabled) {\n        return\n      }\n\n      // By Default we will delete\n      let shouldDelete = true\n      const before = this.store.getSelectedOptions()\n      const after = [] as Option[]\n\n      // Add beforeChange callback\n      if (this.callbacks.beforeChange) {\n        shouldDelete = this.callbacks.beforeChange(after, before) === true\n      }\n\n      if (shouldDelete) {\n        if (this.settings.isMultiple) {\n          this.callbacks.setSelected([], false)\n          this.updateDeselectAll()\n        } else {\n          // Get first option and set it as selected\n          const firstOption = this.store.getFirstOption()\n          const id = firstOption ? firstOption.id : ''\n\n          this.callbacks.setSelected(id, false)\n        }\n\n        // Check if we need to close the dropdown\n        if (this.settings.closeOnSelect) {\n          this.callbacks.close()\n        }\n\n        // Run afterChange callback\n        if (this.callbacks.afterChange) {\n          this.callbacks.afterChange(this.store.getSelectedOptions())\n        }\n      }\n    }\n\n    // Add deselect svg\n    const deselectSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n    deselectSvg.setAttribute('viewBox', '0 0 100 100')\n    const deselectPath = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n    deselectPath.setAttribute('d', this.classes.deselectPath)\n    deselectSvg.appendChild(deselectPath)\n    deselect.appendChild(deselectSvg)\n    main.appendChild(deselect)\n\n    // Add arrow\n    const arrow = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n    arrow.classList.add(this.classes.arrow)\n    arrow.setAttribute('viewBox', '0 0 100 100')\n    const arrowPath = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n    arrowPath.setAttribute('d', this.classes.arrowClose)\n    if (this.settings.alwaysOpen) {\n      arrow.classList.add(this.classes.hide)\n    }\n    arrow.appendChild(arrowPath)\n    main.appendChild(arrow)\n\n    return {\n      main: main,\n      values: values,\n      deselect: {\n        main: deselect,\n        svg: deselectSvg,\n        path: deselectPath\n      },\n      arrow: {\n        main: arrow,\n        path: arrowPath\n      }\n    }\n  }\n\n  public mainFocus(eventType: string | null): void {\n    // Trigger focus but dont scroll to it\n    // Need for prevent refocus the element if event is not keyboard event.\n    // For example if event is mouse click or tachpad click this condition prevent refocus on element\n    // because click by mouse change focus position and not need return focus to element.\n    if (eventType !== 'click') {\n      this.main.main.focus({ preventScroll: true })\n    }\n  }\n\n  public placeholder(): HTMLDivElement {\n    // Figure out if there is a placeholder option\n    const placeholderOption = this.store.filter((o) => o.placeholder, false) as Option[]\n\n    // If there is a placeholder option use that\n    // If placeholder has an html value, use that\n    // If placeholder has a text, use that\n    // If nothing is set, use the placeholder text\n    let placeholderText = this.settings.placeholderText\n    if (placeholderOption.length) {\n      if (placeholderOption[0].html !== '') {\n        placeholderText = placeholderOption[0].html\n      } else if (placeholderOption[0].text !== '') {\n        placeholderText = placeholderOption[0].text\n      }\n    }\n\n    // Create placeholder div\n    const placeholder = document.createElement('div')\n    placeholder.classList.add(this.classes.placeholder)\n    placeholder.innerHTML = placeholderText\n    return placeholder\n  }\n\n  // Get selected values and append to multiSelected values container\n  // and remove those who shouldnt exist\n  public renderValues(): void {\n    // If single select set placeholder or selected value\n    if (!this.settings.isMultiple) {\n      this.renderSingleValue()\n      return\n    }\n\n    this.renderMultipleValues()\n\n    this.updateDeselectAll()\n  }\n\n  private renderSingleValue(): void {\n    const selected = this.store.filter((o: Option): boolean => {\n      return o.selected && !o.placeholder\n    }, false) as Option[]\n    const selectedSingle = selected.length > 0 ? selected[0] : null\n\n    // If nothing is seleected use settings placeholder text\n    if (!selectedSingle) {\n      this.main.values.innerHTML = this.placeholder().outerHTML\n    } else {\n      // Create single value container\n      const singleValue = document.createElement('div')\n      singleValue.classList.add(this.classes.single)\n      if (selectedSingle.html) {\n        singleValue.innerHTML = selectedSingle.html\n      } else {\n        singleValue.innerText = selectedSingle.text\n      }\n\n      // If there is a selected value, set a single div\n      this.main.values.innerHTML = singleValue.outerHTML\n    }\n\n    // If allowDeselect is false or selected value is empty just hide deselect\n    if (!this.settings.allowDeselect || !selected.length) {\n      this.main.deselect.main.classList.add(this.classes.hide)\n    } else {\n      this.main.deselect.main.classList.remove(this.classes.hide)\n    }\n  }\n\n  private renderMultipleValues(): void {\n    // Get various pieces of data\n    let currentNodes = this.main.values.childNodes as NodeListOf<HTMLDivElement>\n    let selectedOptions = this.store.filter((opt: Option) => {\n      // Only grab options that are selected and display is true\n      return opt.selected && opt.display\n    }, false) as Option[]\n\n    // If selectedOptions is empty set placeholder\n    if (selectedOptions.length === 0) {\n      this.main.values.innerHTML = this.placeholder().outerHTML\n      return\n    } else {\n      // If there is a placeholder, remove it\n      const placeholder = this.main.values.querySelector('.' + this.classes.placeholder)\n      if (placeholder) {\n        placeholder.remove()\n      }\n    }\n\n    // If selectedOptions is greater than maxItems, set maxValuesMessage\n    if (selectedOptions.length > this.settings.maxValuesShown) {\n      // Creating the element that shows the number of selected items\n      const singleValue = document.createElement('div')\n      singleValue.classList.add(this.classes.max)\n      singleValue.textContent = this.settings.maxValuesMessage.replace('{number}', selectedOptions.length.toString())\n\n      // If there is a selected value, set a single div\n      this.main.values.innerHTML = singleValue.outerHTML\n      return\n    } else {\n      // If there is a message, remove it\n      const maxValuesMessage = this.main.values.querySelector('.' + this.classes.max)\n      if (maxValuesMessage) {\n        maxValuesMessage.remove()\n      }\n    }\n\n    // Lets check for data selected order\n    if (this.settings.keepOrder) {\n      selectedOptions = this.store.selectedOrderOptions(selectedOptions)\n    }\n\n    // Loop through currentNodes and only include ones that are not in selectedIDs\n    let removeNodes: HTMLDivElement[] = []\n    for (let i = 0; i < currentNodes.length; i++) {\n      const node = currentNodes[i]\n      const id = node.getAttribute('data-id')\n      if (id) {\n        // Check if id is in selectedOptions\n        const found = selectedOptions.filter((opt: Option) => {\n          return opt.id === id\n        }, false)\n\n        // If not found, add to removeNodes\n        if (!found.length) {\n          removeNodes.push(node)\n        }\n      }\n    }\n\n    // Loop through and remove\n    for (const n of removeNodes) {\n      n.classList.add(this.classes.valueOut)\n      setTimeout(() => {\n        if (this.main.values.hasChildNodes() && this.main.values.contains(n)) {\n          this.main.values.removeChild(n)\n        }\n      }, 100)\n    }\n\n    // Add values that dont currently exist\n    currentNodes = this.main.values.childNodes as NodeListOf<HTMLDivElement>\n    for (let d = 0; d < selectedOptions.length; d++) {\n      let shouldAdd = true\n      for (let i = 0; i < currentNodes.length; i++) {\n        if (selectedOptions[d].id === String(currentNodes[i].dataset.id)) {\n          shouldAdd = false\n        }\n      }\n\n      // If shouldAdd, insertAdjacentElement it to the values container in the order of the selectedOptions\n      if (shouldAdd) {\n        // If keepOrder is true, we will just append it to the end\n        if (this.settings.keepOrder) {\n          this.main.values.appendChild(this.multipleValue(selectedOptions[d]))\n        } else {\n          // else we will insert it in the order of the selectedOptions\n          if (currentNodes.length === 0) {\n            this.main.values.appendChild(this.multipleValue(selectedOptions[d]))\n          } else if (d === 0) {\n            this.main.values.insertBefore(this.multipleValue(selectedOptions[d]), currentNodes[d])\n          } else {\n            currentNodes[d - 1].insertAdjacentElement('afterend', this.multipleValue(selectedOptions[d]))\n          }\n        }\n      }\n    }\n  }\n\n  public multipleValue(option: Option): HTMLDivElement {\n    const value = document.createElement('div')\n    value.classList.add(this.classes.value)\n    value.dataset.id = option.id\n\n    const text = document.createElement('div')\n    text.classList.add(this.classes.valueText)\n    text.textContent = option.text // For multiple values always use text\n    value.appendChild(text)\n\n    // Only add deletion if the option is not mandatory\n    if (!option.mandatory) {\n      // Create delete div element\n      const deleteDiv = document.createElement('div')\n      deleteDiv.classList.add(this.classes.valueDelete)\n      deleteDiv.setAttribute('tabindex', '0') // Make the div focusable for tab navigation\n\n      // Add delete onclick event\n      deleteDiv.onclick = (e: Event) => {\n        e.preventDefault()\n        e.stopPropagation()\n\n        // Dont do anything if disabled\n        if (this.settings.disabled) {\n          return\n        }\n\n        // By Default we will delete\n        let shouldDelete = true\n        const before = this.store.getSelectedOptions()\n        const after = before.filter((o) => {\n          return o.selected && o.id !== option.id\n        }, true)\n\n        // Check if minSelected is set and if after length so, return\n        if (this.settings.minSelected && after.length < this.settings.minSelected) {\n          return\n        }\n\n        // If there is a beforeDeselect function run it\n        if (this.callbacks.beforeChange) {\n          shouldDelete = this.callbacks.beforeChange(after, before) === true\n        }\n\n        if (shouldDelete) {\n          // Loop through after and append ids to a variable called selected\n          let selectedIds: string[] = []\n          for (const o of after) {\n            if (o instanceof Optgroup) {\n              for (const c of o.options) {\n                if (c.id) {\n                  selectedIds.push(c.id)\n                }\n              }\n            }\n\n            if (o instanceof Option) {\n              selectedIds.push(o.id)\n            }\n          }\n          this.callbacks.setSelected(selectedIds, false)\n\n          // Check if we need to close the dropdown\n          if (this.settings.closeOnSelect) {\n            this.callbacks.close()\n          }\n\n          // Run afterChange callback\n          if (this.callbacks.afterChange) {\n            this.callbacks.afterChange(after)\n          }\n\n          this.updateDeselectAll()\n        }\n      }\n\n      // Add delete svg\n      const deleteSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n      deleteSvg.setAttribute('viewBox', '0 0 100 100')\n      const deletePath = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n      deletePath.setAttribute('d', this.classes.optionDelete)\n      deleteSvg.appendChild(deletePath)\n      deleteDiv.appendChild(deleteSvg)\n\n      value.appendChild(deleteDiv)\n\n      // Add keydown event listener for keyboard navigation (Enter key)\n      deleteDiv.onkeydown = (e) => {\n        if (e.key === 'Enter') {\n          deleteDiv.click() // Trigger the click event when Enter is pressed\n        }\n      }\n    }\n\n    return value\n  }\n\n  public contentDiv(): Content {\n    const main = document.createElement('div')\n\n    // Add id to data-id\n    main.dataset.id = this.settings.id\n    // main.id = this.settings.id + '-content' // Remove for now as it is not needed and add duplicate id errors\n\n    // Add search\n    const search = this.searchDiv()\n    main.appendChild(search.main)\n\n    // Add list\n    const list = this.listDiv()\n    main.appendChild(list)\n\n    return {\n      main: main,\n      search: search,\n      list: list\n    }\n  }\n\n  public moveContent(): void {\n    // If contentPosition is relative, dont move the content anywhere other than below\n    if (this.settings.contentPosition === 'relative') {\n      this.moveContentBelow()\n      return\n    }\n\n    // If openContent is not auto set content\n    if (this.settings.openPosition === 'down') {\n      this.moveContentBelow()\n      return\n    } else if (this.settings.openPosition === 'up') {\n      this.moveContentAbove()\n      return\n    }\n\n    // Auto - Determine where to put the content\n    if (this.putContent() === 'up') {\n      this.moveContentAbove()\n    } else {\n      this.moveContentBelow()\n    }\n  }\n\n  public searchDiv(): Search {\n    const main = document.createElement('div')\n    const input = document.createElement('input')\n    const addable = document.createElement('div')\n    main.classList.add(this.classes.search)\n\n    // Setup search return object\n    const searchReturn: Search = {\n      main,\n      input\n    }\n\n    // We still want the search to be tabable but not shown\n    if (!this.settings.showSearch) {\n      main.classList.add(this.classes.hide)\n      input.readOnly = true\n    }\n\n    input.type = 'search'\n    input.placeholder = this.settings.searchPlaceholder\n    input.tabIndex = -1\n    input.setAttribute('aria-label', this.settings.searchPlaceholder)\n    input.setAttribute('aria-autocomplete', 'list')\n    input.setAttribute('autocapitalize', 'off')\n    input.setAttribute('autocomplete', 'off')\n    input.setAttribute('autocorrect', 'off')\n    // Hide from screen readers by default (shown when opened)\n    input.setAttribute('aria-hidden', 'true')\n\n    input.oninput = debounce((e: Event) => {\n      this.callbacks.search((e.target as HTMLInputElement).value)\n    }, 100)\n\n    // Deal with keyboard events on search input field\n    input.onkeydown = (e: KeyboardEvent): boolean => {\n      // Convert above if else statemets to switch\n      switch (e.key) {\n        case 'ArrowUp':\n        case 'ArrowDown':\n          e.key === 'ArrowDown' ? this.highlight('down') : this.highlight('up')\n          return false\n        case 'Tab':\n          // When tabbing close the dropdown\n          // which will also focus on main div\n          // and then continuing normal tabbing\n          this.callbacks.close()\n          return true // Continue doing normal tabbing\n        case 'Escape':\n          this.callbacks.close()\n          return false\n        case ' ':\n          const highlighted = this.content.list.querySelector('.' + this.classes.highlighted) as HTMLDivElement\n          if (highlighted) {\n            highlighted.click()\n            return false\n          }\n          return true\n        case 'Enter':\n          // Check if there's a highlighted option first\n          const highlightedEnter = this.content.list.querySelector('.' + this.classes.highlighted) as HTMLDivElement\n          if (highlightedEnter) {\n            // If an option is highlighted, select it (even if addable is enabled)\n            highlightedEnter.click()\n            return false\n          } else if (this.callbacks.addable) {\n            // If no option is highlighted and addable is enabled, add new item\n            addable.click()\n            return false\n          }\n          return true\n      }\n\n      return true // Allow normal typing\n    }\n\n    main.appendChild(input)\n\n    // If addable is enabled, add the addable div\n    if (this.callbacks.addable) {\n      // Add main class\n      addable.classList.add(this.classes.addable)\n\n      // Add svg icon\n      const plus = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n      plus.setAttribute('viewBox', '0 0 100 100')\n      const plusPath = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n      plusPath.setAttribute('d', this.classes.addablePath)\n      plus.appendChild(plusPath)\n      addable.appendChild(plus)\n\n      // Add click event to addable div\n      addable.onclick = (e: Event) => {\n        e.preventDefault()\n        e.stopPropagation()\n\n        // Do nothing if addable is not set\n        if (!this.callbacks.addable) {\n          return\n        }\n\n        // Grab input value\n        const inputValue = this.content.search.input.value.trim()\n        if (inputValue === '') {\n          this.content.search.input.focus()\n          return\n        }\n\n        // Run finish will be ran at the end of the addable function.\n        // Reason its in a function is so we can run it after the\n        // addable function is done for promise based addables\n        const runFinish = (oo: Partial<Option>) => {\n          let newOption = new Option(oo)\n\n          // Call addOption to add the new option\n          this.callbacks.addOption(newOption)\n\n          // set selected value for single and multiple\n          if (this.settings.isMultiple) {\n            let ids = this.store.getSelected()\n            ids.push(newOption.id)\n            this.callbacks.setSelected(ids, true)\n          } else {\n            this.callbacks.setSelected([newOption.id], true)\n          }\n\n          // Clear search\n          this.callbacks.search('')\n\n          // Close it only if closeOnSelect = true\n          if (this.settings.closeOnSelect) {\n            setTimeout(() => {\n              // Give it a little padding for a better looking animation\n              this.callbacks.close()\n            }, 100)\n          }\n        }\n\n        // Call addable callback\n        const addableValue = this.callbacks.addable(inputValue)\n\n        // If addableValue is false, undefined or null, do nothing\n        if (addableValue === false || addableValue === undefined || addableValue === null) {\n          return\n        }\n\n        // If addableValue is a promise, wait for it to resolve\n        if (addableValue instanceof Promise) {\n          addableValue.then((value) => {\n            if (typeof value === 'string') {\n              runFinish({\n                text: value,\n                value: value\n              })\n            } else if (addableValue instanceof Error) {\n              this.renderError(addableValue.message)\n            } else {\n              runFinish(value)\n            }\n          })\n        } else if (typeof addableValue === 'string') {\n          runFinish({\n            text: addableValue,\n            value: addableValue\n          })\n        } else if (addableValue instanceof Error) {\n          this.renderError(addableValue.message)\n        } else {\n          runFinish(addableValue)\n        }\n\n        return\n      }\n      main.appendChild(addable)\n\n      // Add the addable to the search return\n      searchReturn.addable = {\n        main: addable,\n        svg: plus,\n        path: plusPath\n      }\n    }\n\n    return searchReturn\n  }\n\n  public searchFocus(): void {\n    this.content.search.input.focus()\n  }\n\n  public clearSearch(): void {\n    this.content.search.input.value = ''\n  }\n\n  public getOptions(notPlaceholder = false, notDisabled = false, notHidden = false): HTMLDivElement[] {\n    // Put together query string\n    let query = '.' + this.classes.option\n    if (notPlaceholder) {\n      query += ':not(.' + this.classes.placeholder + ')'\n    }\n    if (notDisabled) {\n      query += ':not(.' + this.classes.disabled + ')'\n    }\n    if (notHidden) {\n      query += ':not(.' + this.classes.hide + ')'\n    }\n\n    return Array.from(this.content.list.querySelectorAll(query))\n  }\n\n  // highlightUp is used to highlight the previous option in the list\n  public highlight(dir: 'up' | 'down'): void {\n    // Get full list of options in list\n    const options = this.getOptions(true, true, true)\n\n    // If there are no options, do nothing\n    if (options.length === 0) {\n      return\n    }\n\n    // If length is 1, highlight it\n    if (options.length === 1) {\n      // Check if option doesnt already have highlighted class\n      if (!options[0].classList.contains(this.classes.highlighted)) {\n        options[0].classList.add(this.classes.highlighted)\n        return\n      }\n    }\n\n    // Loop through options and see if there are no highlighted ones\n    let highlighted = false\n    for (const o of options) {\n      if (o.classList.contains(this.classes.highlighted)) {\n        highlighted = true\n      }\n    }\n\n    // If no highlighted, see if any are selected and if so highlight selected first one\n    if (!highlighted) {\n      for (const o of options) {\n        if (o.classList.contains(this.classes.selected)) {\n          o.classList.add(this.classes.highlighted)\n          break\n        }\n      }\n    }\n\n    // Loop through options and find the highlighted one\n    for (let i = 0; i < options.length; i++) {\n      // Found highlighted option\n      if (options[i].classList.contains(this.classes.highlighted)) {\n        const prevOption = options[i]\n        // Remove highlighted class from current one\n        prevOption.classList.remove(this.classes.highlighted)\n\n        // If previous option has parent classes ss-optgroup with ss-open then click it\n        const prevParent = prevOption.parentElement\n        if (prevParent && prevParent.classList.contains(this.classes.mainOpen)) {\n          const optgroupLabel = prevParent.querySelector('.' + this.classes.optgroupLabel) as HTMLDivElement\n          if (optgroupLabel) {\n            optgroupLabel.click()\n          }\n        }\n\n        // Highlight the next one\n        let selectOption =\n          options[dir === 'down' ? (i + 1 < options.length ? i + 1 : 0) : i - 1 >= 0 ? i - 1 : options.length - 1]\n        selectOption.classList.add(this.classes.highlighted)\n        this.ensureElementInView(this.content.list, selectOption)\n\n        // Update aria-activedescendant for screen readers\n        if (selectOption.id) {\n          this.main.main.setAttribute('aria-activedescendant', selectOption.id)\n        }\n\n        // If selected option has parent classes ss-optgroup with ss-close then click it\n        const selectParent = selectOption.parentElement\n        if (selectParent && selectParent.classList.contains(this.classes.close)) {\n          const optgroupLabel = selectParent.querySelector('.' + this.classes.optgroupLabel) as HTMLDivElement\n          if (optgroupLabel) {\n            optgroupLabel.click()\n          }\n        }\n\n        return\n      }\n    }\n\n    // If we get here, there is no highlighted option\n    // So we will highlight the first or last based upon direction\n    const firstHighlight = options[dir === 'down' ? 0 : options.length - 1]\n    firstHighlight.classList.add(this.classes.highlighted)\n\n    // Update aria-activedescendant for screen readers\n    if (firstHighlight.id) {\n      this.main.main.setAttribute('aria-activedescendant', firstHighlight.id)\n    }\n\n    // Scroll to highlighted one\n    this.ensureElementInView(this.content.list, firstHighlight)\n  }\n\n  // Create main container that options will reside\n  public listDiv(): HTMLDivElement {\n    const options = document.createElement('div')\n    options.classList.add(this.classes.list)\n\n    // Add id for ARIA controls reference\n    const listId = this.settings.id + '-list'\n    options.id = listId\n    options.dataset.id = listId\n\n    return options\n  }\n\n  public renderError(error: string) {\n    // Clear out innerHtml\n    this.content.list.innerHTML = ''\n\n    const errorDiv = document.createElement('div')\n    errorDiv.classList.add(this.classes.error)\n    errorDiv.textContent = error\n    this.content.list.appendChild(errorDiv)\n  }\n\n  public renderSearching() {\n    // Clear out innerHtml\n    this.content.list.innerHTML = ''\n\n    const searchingDiv = document.createElement('div')\n    searchingDiv.classList.add(this.classes.searching)\n    searchingDiv.textContent = this.settings.searchingText\n    this.content.list.appendChild(searchingDiv)\n  }\n\n  // Take in data and add options to\n  public renderOptions(data: (Option | Optgroup)[]): void {\n    // Clear out innerHtml\n    this.content.list.innerHTML = ''\n\n    // If no results show no results text\n    if (data.length === 0) {\n      const noResults = document.createElement('div')\n      noResults.classList.add(this.classes.search)\n\n      //\n      if (this.callbacks.addable) {\n        noResults.innerHTML = this.settings.addableText.replace('{value}', this.content.search.input.value)\n      } else {\n        noResults.innerHTML = this.settings.searchText\n      }\n      this.content.list.appendChild(noResults)\n      return\n    }\n\n    // If settings has allowDeselect and isSingle, add empty placeholder in the event they want to deselect\n    if (this.settings.allowDeselect && !this.settings.isMultiple) {\n      // Check if store options have a placeholder\n      const placeholderOption = this.store.filter((o) => o.placeholder, false) as Option[]\n      if (!placeholderOption.length) {\n        this.store.addOption(\n          new Option({\n            text: '',\n            value: '',\n            selected: false,\n            placeholder: true\n          }),\n          true\n        )\n      }\n    }\n\n    // Append individual options to div container\n    const fragment = document.createDocumentFragment()\n    for (const d of data) {\n      // Create optgroup\n      if (d instanceof Optgroup) {\n        // Create optgroup\n        const optgroupEl = document.createElement('div')\n        optgroupEl.classList.add(this.classes.optgroup)\n\n        // Create label\n        const optgroupLabel = document.createElement('div')\n        optgroupLabel.classList.add(this.classes.optgroupLabel)\n        optgroupEl.appendChild(optgroupLabel)\n\n        // Create label text div element\n        const optgroupLabelText = document.createElement('div')\n        optgroupLabelText.classList.add(this.classes.optgroupLabelText)\n        optgroupLabelText.textContent = d.label\n        optgroupLabel.appendChild(optgroupLabelText)\n\n        // Create options container\n        const optgroupActions = document.createElement('div')\n        optgroupActions.classList.add(this.classes.optgroupActions)\n        optgroupLabel.appendChild(optgroupActions)\n\n        // If selectByGroup is true and isMultiple then add click event to label\n        if (this.settings.isMultiple && d.selectAll) {\n          // Create new div to hold a checkbox svg\n          const selectAll = document.createElement('div')\n          selectAll.classList.add(this.classes.optgroupSelectAll)\n\n          // Check options and if all are selected, if so add class selected\n          let allSelected = true\n          for (const o of d.options) {\n            if (!o.selected) {\n              allSelected = false\n              break\n            }\n          }\n\n          // Add class if all selected\n          if (allSelected) {\n            selectAll.classList.add(this.classes.selected)\n          }\n\n          // Add select all text span\n          const selectAllText = document.createElement('span')\n          selectAllText.textContent = d.selectAllText\n          selectAll.appendChild(selectAllText)\n\n          // Create new svg for checkbox\n          const selectAllSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n          selectAllSvg.setAttribute('viewBox', '0 0 100 100')\n          selectAll.appendChild(selectAllSvg)\n\n          // Create new path for box\n          const selectAllBox = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n          selectAllBox.setAttribute('d', this.classes.optgroupSelectAllBox)\n          selectAllSvg.appendChild(selectAllBox)\n\n          // Create new path for check\n          const selectAllCheck = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n          selectAllCheck.setAttribute('d', this.classes.optgroupSelectAllCheck)\n          selectAllSvg.appendChild(selectAllCheck)\n\n          // Add click event listener to select all\n          selectAll.addEventListener('click', (e: MouseEvent) => {\n            e.preventDefault()\n            e.stopPropagation()\n\n            // Get the store current selected values\n            const currentSelected = this.store.getSelected()\n\n            // If all selected, remove all options from selected\n            // call setSelected and return\n            if (allSelected) {\n              // Put together new list minus all options in this optgroup\n              const newSelected = currentSelected.filter((s) => {\n                for (const o of d.options) {\n                  if (s === o.id) {\n                    return false\n                  }\n                }\n\n                return true\n              })\n\n              this.callbacks.setSelected(newSelected, true)\n              return\n            } else {\n              // Put together new list with all options in this optgroup\n              let optionIds = d.options.map((o) => o.id).filter((id) => id !== undefined)\n              const newSelected = currentSelected.concat(optionIds)\n\n              // Loop through options and if they don't exist in the store\n              // run addOption callback\n              for (const o of d.options) {\n                if (o.id && !this.store.getOptionByID(o.id)) {\n                  this.callbacks.addOption(new Option(o))\n                }\n              }\n\n              this.callbacks.setSelected(newSelected, true)\n              return\n            }\n          })\n\n          // Append select all to label\n          optgroupActions.appendChild(selectAll)\n        }\n\n        // If optgroup has collapsable\n        if (d.closable !== 'off') {\n          // Create new div to hold a checkbox svg\n          const optgroupClosable = document.createElement('div')\n          optgroupClosable.classList.add(this.classes.optgroupClosable)\n\n          // Create svg arrow\n          const optgroupClosableSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n          optgroupClosableSvg.setAttribute('viewBox', '0 0 100 100')\n          optgroupClosableSvg.classList.add(this.classes.arrow)\n          optgroupClosable.appendChild(optgroupClosableSvg)\n\n          // Create new path for arrow\n          const optgroupClosableArrow = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n          optgroupClosableSvg.appendChild(optgroupClosableArrow)\n\n          // If any options are selected or someone is searching, set optgroup to open\n          if (d.options.some((o) => o.selected) || this.content.search.input.value.trim() !== '') {\n            optgroupClosable.classList.add(this.classes.mainOpen)\n            optgroupClosableArrow.setAttribute('d', this.classes.arrowOpen)\n          } else if (d.closable === 'open') {\n            optgroupEl.classList.add(this.classes.mainOpen)\n            optgroupClosableArrow.setAttribute('d', this.classes.arrowOpen)\n          } else if (d.closable === 'close') {\n            optgroupEl.classList.add(this.classes.close)\n            optgroupClosableArrow.setAttribute('d', this.classes.arrowClose)\n          }\n\n          // Add click event listener to close\n          optgroupLabel.addEventListener('click', (e: MouseEvent) => {\n            e.preventDefault()\n            e.stopPropagation()\n\n            // If optgroup is closed, open it\n            if (optgroupEl.classList.contains(this.classes.close)) {\n              optgroupEl.classList.remove(this.classes.close)\n              optgroupEl.classList.add(this.classes.mainOpen)\n              optgroupClosableArrow.setAttribute('d', this.classes.arrowOpen)\n            } else {\n              optgroupEl.classList.remove(this.classes.mainOpen)\n              optgroupEl.classList.add(this.classes.close)\n              optgroupClosableArrow.setAttribute('d', this.classes.arrowClose)\n            }\n          })\n\n          // Append close to label\n          optgroupActions.appendChild(optgroupClosable)\n        }\n\n        // Add optgroup label\n        optgroupEl.appendChild(optgroupLabel)\n\n        // Loop through options\n        for (const option of d.options) {\n          optgroupEl.appendChild(this.option(new Option(option)))\n          fragment.appendChild(optgroupEl)\n        }\n      }\n\n      // Create option\n      if (d instanceof Option) {\n        fragment.appendChild(this.option(d as Option))\n      }\n    }\n\n    // Append fragment to list\n    this.content.list.appendChild(fragment)\n  }\n\n  // Create option div element\n  public option(option: Option): HTMLDivElement {\n    // Add hidden placeholder\n    if (option.placeholder) {\n      const placeholder = document.createElement('div')\n      placeholder.classList.add(this.classes.option)\n      placeholder.classList.add(this.classes.hide)\n      return placeholder\n    }\n\n    // Create option\n    const optionEl = document.createElement('div')\n    optionEl.dataset.id = option.id // Dataset id for identifying an option\n    optionEl.id = this.settings.id + '-' + option.id // Unique ID for ARIA references\n    optionEl.classList.add(this.classes.option)\n    optionEl.setAttribute('role', 'option') // WCAG attribute\n    if (option.class) {\n      option.class.split(' ').forEach((dataClass: string) => {\n        optionEl.classList.add(dataClass)\n      })\n    }\n    if (option.style) {\n      optionEl.style.cssText = option.style\n    }\n\n    // Set option content\n    if (this.settings.searchHighlight && this.content.search.input.value.trim() !== '') {\n      optionEl.innerHTML = this.highlightText(\n        option.html !== '' ? option.html : option.text,\n        this.content.search.input.value,\n        this.classes.searchHighlighter\n      )\n    } else if (option.html !== '') {\n      optionEl.innerHTML = option.html\n    } else {\n      optionEl.textContent = option.text\n    }\n\n    // Set title attribute\n    if (this.settings.showOptionTooltips && optionEl.textContent) {\n      optionEl.setAttribute('title', optionEl.textContent)\n    }\n\n    // If option is disabled\n    if (!option.display) {\n      optionEl.classList.add(this.classes.hide)\n    }\n\n    // If allowed to deselect, null onclick and add disabled\n    if (option.disabled) {\n      optionEl.classList.add(this.classes.disabled)\n    }\n\n    // If option is selected and hideSelectedOption is true, hide it\n    if (option.selected && this.settings.hideSelected) {\n      optionEl.classList.add(this.classes.hide)\n    }\n\n    // If option is selected\n    if (option.selected) {\n      optionEl.classList.add(this.classes.selected)\n      optionEl.setAttribute('aria-selected', 'true')\n      this.main.main.setAttribute('aria-activedescendant', optionEl.id)\n    } else {\n      optionEl.classList.remove(this.classes.selected)\n      optionEl.setAttribute('aria-selected', 'false')\n    }\n\n    // Add click event listener\n    optionEl.addEventListener('click', (e: MouseEvent) => {\n      e.preventDefault()\n      e.stopPropagation()\n\n      // Setup variables\n      const selectedOptions = this.store.getSelected()\n      const element = e.currentTarget as HTMLDivElement\n      const elementID = String(element.dataset.id)\n      const isCmd = e.ctrlKey || e.metaKey // Cmd (Mac) or Ctrl (Windows/Linux)\n\n      // If the option is disabled, do nothing\n      if (option.disabled) {\n        return\n      }\n\n      // allowDeselect only applies to single-select mode\n      // In multi-select, you can always toggle options on/off\n      if (!this.settings.isMultiple && option.selected && !this.settings.allowDeselect) {\n        return\n      }\n\n      // Check limit and do nothing if limit is reached and the option is not selected\n      // Also check reverse for min limit and is selected (allow Cmd to bypass minSelected)\n      if (\n        (this.settings.isMultiple && this.settings.maxSelected <= selectedOptions.length && !option.selected) ||\n        (this.settings.isMultiple && this.settings.minSelected >= selectedOptions.length && option.selected && !isCmd)\n      ) {\n        return\n      }\n\n      // Setup variables\n      let shouldUpdate = false\n      const before = this.store.getSelectedOptions()\n      let after = [] as Option[]\n\n      // If multiple - mimic native browser multi-select behavior\n      if (this.settings.isMultiple) {\n        const isCurrentlySelected = before.some((o: Option) => o.id === elementID)\n        const isShift = e.shiftKey\n\n        // Shift+Click: Select range from last clicked to current\n        if (isShift && this.lastSelectedOption) {\n          const options = this.store.getDataOptions()\n          const lastIndex = options.findIndex((o: Option) => o.id === this.lastSelectedOption!.id)\n          const currentIndex = options.findIndex((o: Option) => o.id === option.id)\n\n          if (lastIndex >= 0 && currentIndex >= 0) {\n            const startIndex = Math.min(lastIndex, currentIndex)\n            const endIndex = Math.max(lastIndex, currentIndex)\n            const rangeOptions = options.slice(startIndex, endIndex + 1)\n\n            // Check if range would exceed maxSelected\n            const newSelections = rangeOptions.filter((opt) => !before.find((b) => b.id === opt.id))\n            if (before.length + newSelections.length <= this.settings.maxSelected) {\n              // Add range to existing selections\n              after = before.concat(newSelections)\n            } else {\n              // Range too large, keep existing selections\n              after = before\n            }\n          } else {\n            after = before\n          }\n        }\n        // Cmd/Ctrl+Click: Toggle selection without affecting others (keeps dropdown open)\n        else if (isCmd) {\n          if (isCurrentlySelected) {\n            // Deselect this option\n            after = before.filter((o: Option) => o.id !== elementID)\n          } else {\n            // Add this option to selection\n            after = before.concat(option)\n          }\n          this.lastSelectedOption = option\n        }\n        // Regular Click: Toggle this option (add/remove), will close dropdown\n        else {\n          if (isCurrentlySelected) {\n            // Deselect this option\n            after = before.filter((o: Option) => o.id !== elementID)\n          } else {\n            // Add this option to selection\n            after = before.concat(option)\n          }\n          this.lastSelectedOption = option\n        }\n      }\n\n      // If single\n      if (!this.settings.isMultiple) {\n        if (option.selected) {\n          // If selected after would remove\n          after = []\n        } else {\n          // If not selected after would add\n          after = [option]\n        }\n      }\n\n      // If no beforeOnChange is set automatically update at end\n      if (!this.callbacks.beforeChange) {\n        shouldUpdate = true\n      }\n\n      if (this.callbacks.beforeChange) {\n        // Check if beforeChange returns false\n        if (this.callbacks.beforeChange(after, before) === false) {\n          shouldUpdate = false\n        } else {\n          shouldUpdate = true\n        }\n      }\n\n      if (shouldUpdate) {\n        // Check if the option exists in the store\n        // if not run addOption callback\n        if (!this.store.getOptionByID(elementID)) {\n          this.callbacks.addOption(option)\n        }\n\n        // Get values from after and set as selected\n        this.callbacks.setSelected(\n          after.map((o: Option) => o.id),\n          false\n        )\n\n        // Close dropdown unless using modifier keys in multi-select\n        // (mimics native multi-select behavior where you can keep selecting)\n        const isModifierKey = e.ctrlKey || e.metaKey || e.shiftKey // Cmd/Ctrl or Shift\n        const shouldClose = this.settings.closeOnSelect && !(this.settings.isMultiple && isModifierKey)\n\n        if (shouldClose) {\n          this.callbacks.close()\n        }\n\n        // callback that the value has changed\n        if (this.callbacks.afterChange) {\n          this.callbacks.afterChange(after)\n        }\n      }\n    })\n\n    return optionEl\n  }\n\n  public destroy(): void {\n    // Remove main\n    this.main.main.remove()\n\n    // Remove content\n    this.content.main.remove()\n  }\n\n  private highlightText(str: string, search: any, className: string) {\n    const searchTerm = search.trim()\n    if (searchTerm === '') {\n      return str\n    }\n\n    // Escape special regex characters in the search term to prevent regex injection\n    const escapedSearch = searchTerm.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n\n    // Create a temporary div to parse HTML and work with text nodes only\n    const tempDiv = document.createElement('div')\n    tempDiv.innerHTML = str\n\n    // Function to recursively process text nodes\n    const highlightTextNodes = (node: Node) => {\n      if (node.nodeType === Node.TEXT_NODE) {\n        const text = node.textContent || ''\n        const regex = new RegExp('(' + escapedSearch + ')', 'i')\n\n        if (regex.test(text)) {\n          // Create a temporary container for the highlighted content\n          const wrapper = document.createElement('span')\n          const parts = text.split(regex)\n\n          parts.forEach((part, index) => {\n            if (part && regex.test(part)) {\n              // This is the matched part - wrap it in mark\n              const mark = document.createElement('mark')\n              mark.className = className\n              mark.textContent = part\n              wrapper.appendChild(mark)\n            } else if (part) {\n              // This is not the matched part - keep as text\n              wrapper.appendChild(document.createTextNode(part))\n            }\n          })\n\n          // Replace the text node with the wrapper\n          node.parentNode?.replaceChild(wrapper, node)\n        }\n      } else if (node.nodeType === Node.ELEMENT_NODE) {\n        // Recursively process child nodes\n        Array.from(node.childNodes).forEach((child) => highlightTextNodes(child))\n      }\n    }\n\n    // Process all text nodes in the temporary div\n    Array.from(tempDiv.childNodes).forEach((node) => highlightTextNodes(node))\n\n    return tempDiv.innerHTML\n  }\n\n  public moveContentAbove(): void {\n    // Get main and content height\n    const mainHeight = this.main.main.offsetHeight\n    const contentHeight = this.content.main.offsetHeight\n\n    // Set direction classes on both main and content\n    this.main.main.classList.remove(this.classes.dirBelow)\n    this.main.main.classList.add(this.classes.dirAbove)\n    this.content.main.classList.remove(this.classes.dirBelow)\n    this.content.main.classList.add(this.classes.dirAbove)\n\n    // Set the content position\n    const containerRect = this.main.main.getBoundingClientRect()\n    this.content.main.style.margin = '-' + (mainHeight + contentHeight - 1) + 'px 0px 0px 0px'\n    this.content.main.style.top =\n      containerRect.top + containerRect.height + (this.settings.contentPosition === 'fixed' ? 0 : window.scrollY) + 'px'\n    this.content.main.style.left =\n      containerRect.left + (this.settings.contentPosition === 'fixed' ? 0 : window.scrollX) + 'px'\n    this.content.main.style.width = containerRect.width + 'px'\n  }\n\n  public moveContentBelow(): void {\n    // Set direction classes on both main and content\n    this.main.main.classList.remove(this.classes.dirAbove)\n    this.main.main.classList.add(this.classes.dirBelow)\n    this.content.main.classList.remove(this.classes.dirAbove)\n    this.content.main.classList.add(this.classes.dirBelow)\n\n    // Set the content position\n    const containerRect = this.main.main.getBoundingClientRect()\n    this.content.main.style.margin = '-1px 0px 0px 0px'\n    // Dont do anything if the content is relative\n    if (this.settings.contentPosition !== 'relative') {\n      this.content.main.style.top =\n        containerRect.top +\n        containerRect.height +\n        (this.settings.contentPosition === 'fixed' ? 0 : window.scrollY) +\n        'px'\n      this.content.main.style.left =\n        containerRect.left + (this.settings.contentPosition === 'fixed' ? 0 : window.scrollX) + 'px'\n      this.content.main.style.width = containerRect.width + 'px'\n    }\n  }\n\n  public ensureElementInView(container: HTMLElement, element: HTMLElement): void {\n    // Determine container top and bottom\n    const cTop = container.scrollTop + container.offsetTop // Make sure to have offsetTop\n    const cBottom = cTop + container.clientHeight\n\n    // Determine element top and bottom\n    const eTop = element.offsetTop\n    const eBottom = eTop + element.clientHeight\n\n    // Check if out of view\n    if (eTop < cTop) {\n      container.scrollTop -= cTop - eTop\n    } else if (eBottom > cBottom) {\n      container.scrollTop += eBottom - cBottom\n    }\n  }\n\n  public putContent(): 'up' | 'down' {\n    // Get main and content height\n    const mainHeight = this.main.main.offsetHeight\n    const mainRect = this.main.main.getBoundingClientRect()\n    const contentHeight = this.content.main.offsetHeight\n\n    // From bottom of mainHeight figure out if content will fit below without going below the window\n    const spaceBelow = window.innerHeight - (mainRect.top + mainHeight)\n\n    // If space below is less than content height\n    if (spaceBelow <= contentHeight) {\n      // If space above is more than content height\n      if (mainRect.top > contentHeight) {\n        // Move content above\n        return 'up'\n      } else {\n        // Move content below\n        return 'down'\n      }\n    }\n\n    // Move content below\n    return 'down'\n  }\n\n  // Updates deselect based on item count and allowDeselect setting\n  public updateDeselectAll(): void {\n    if (!this.store || !this.settings) {\n      return\n    }\n    const selected = this.store.getSelectedOptions()\n    const hasSelectedItems = selected && selected.length > 0\n    const isMultiple = this.settings.isMultiple\n    const allowDeselect = this.settings.allowDeselect\n\n    const deselectButton = this.main.deselect.main\n    const hideClass = this.classes.hide\n\n    if (allowDeselect && !(isMultiple && !hasSelectedItems)) {\n      deselectButton.classList.remove(hideClass)\n    } else {\n      deselectButton.classList.add(hideClass)\n    }\n  }\n}\n","import { kebabCase } from './helpers'\nimport { Optgroup, Option } from './store'\n\nexport default class Select {\n  public select: HTMLSelectElement\n\n  // Mutation observer fields\n  public onValueChange?: (value: Option[]) => void\n  public onClassChange?: (classes: string[]) => void\n  public onDisabledChange?: (disabled: boolean) => void\n  public onOptionsChange?: (data: (Option | Optgroup)[]) => void\n\n  // Change observers\n  public listen: boolean = false\n  private observer: MutationObserver | null = null\n\n  constructor(select: HTMLSelectElement) {\n    this.select = select\n\n    this.valueChange = this.valueChange.bind(this)\n    // Add change event listener\n    this.select.addEventListener('change', this.valueChange, {\n      // allow bubbling of event\n      passive: true\n    })\n\n    // Initiate mutation observer\n    this.observer = new MutationObserver(this.observeCall.bind(this))\n\n    // Start listening for changes\n    this.changeListen(true)\n  }\n\n  public enable(): void {\n    this.select.disabled = false\n  }\n\n  public disable(): void {\n    this.select.disabled = true\n  }\n\n  public hideUI(): void {\n    this.select.tabIndex = -1\n    // Visually hide but keep focusable for form validation\n    // Use 1px dimensions so browser validation popup can display\n    this.select.style.position = 'absolute'\n    this.select.style.width = '1px'\n    this.select.style.height = '1px'\n    this.select.style.opacity = '0'\n    this.select.style.overflow = 'hidden'\n    this.select.style.pointerEvents = 'none'\n    // Remove any spacing or borders that could affect layout\n    this.select.style.margin = '0'\n    this.select.style.padding = '0'\n    this.select.style.borderWidth = '0'\n    // Clip to completely hide the 1px\n    this.select.style.clip = 'rect(0 0 0 0)'\n    this.select.setAttribute('aria-hidden', 'true')\n  }\n\n  public showUI(): void {\n    this.select.removeAttribute('tabindex')\n    // Reset visual hiding styles\n    this.select.style.position = ''\n    this.select.style.width = ''\n    this.select.style.height = ''\n    this.select.style.opacity = ''\n    this.select.style.overflow = ''\n    this.select.style.pointerEvents = ''\n    this.select.style.margin = ''\n    this.select.style.padding = ''\n    this.select.style.borderWidth = ''\n    this.select.style.clip = ''\n    this.select.removeAttribute('aria-hidden')\n  }\n\n  public changeListen(listen: boolean) {\n    this.listen = listen\n\n    // Start listening for changes\n    if (listen) {\n      if (this.observer) {\n        this.observer.observe(this.select, {\n          subtree: true, // subtree for optgroups options\n          childList: true, // children changes\n          attributes: true // attributes changes\n        })\n      }\n    }\n\n    // Stop listening for changes\n    if (!listen) {\n      if (this.observer) {\n        this.observer.disconnect()\n      }\n    }\n  }\n\n  // This function get triggers when the select value changes\n  // and will call the onValueChange function if it exists\n  public valueChange(ev: Event): boolean {\n    if (this.listen && this.onValueChange) {\n      this.onValueChange(this.getSelectedOptions())\n    }\n\n    // Allow bubbling back to other change event listeners\n    return true\n  }\n\n  private observeCall(mutations: MutationRecord[]): void {\n    // If we are not listening, do nothing.\n    if (!this.listen) {\n      return\n    }\n\n    let classChanged = false\n    let disabledChanged = false\n    let optgroupOptionChanged = false\n\n    // Loop through mutations and check various things\n    for (const m of mutations) {\n      // Check if its the select\n      if (m.target === this.select) {\n        // Check if disabled has changed\n        if (m.attributeName === 'disabled') {\n          disabledChanged = true\n        }\n\n        // Check if class has changed\n        if (m.attributeName === 'class') {\n          classChanged = true\n        }\n\n        if (m.type === 'childList') {\n          for (const n of Array.from(m.addedNodes)) {\n            if (n.nodeName === 'OPTION' && (<HTMLOptionElement>n).value === this.select.value) {\n              // we added a new option that's now the select value\n              this.select.dispatchEvent(new Event('change'))\n              break\n            }\n          }\n\n          // options changed, so we need the optionsChange event to fire\n          optgroupOptionChanged = true\n        }\n      }\n\n      // Check if its an optgroup or option\n      if (m.target.nodeName === 'OPTGROUP' || m.target.nodeName === 'OPTION') {\n        optgroupOptionChanged = true\n      }\n    }\n\n    // If class has changed then call the class change function\n    if (classChanged && this.onClassChange) {\n      this.onClassChange(this.select.className.split(' '))\n    }\n\n    // If disabled has changed then call the disabled change function\n    if (disabledChanged && this.onDisabledChange) {\n      this.changeListen(false)\n      this.onDisabledChange(this.select.disabled)\n      this.changeListen(true)\n    }\n\n    // If optgroup or option has changed then call the select change function\n    if (optgroupOptionChanged && this.onOptionsChange) {\n      this.changeListen(false)\n      this.onOptionsChange(this.getData())\n      this.changeListen(true)\n    }\n  }\n\n  // From the select element pull optgroup and options into data\n  public getData(): (Option | Optgroup)[] {\n    let data = []\n\n    // Loop through nodes and get data\n    const nodes = this.select.childNodes as any as HTMLOptGroupElement[] | HTMLOptionElement[]\n    for (const n of nodes) {\n      // Optgroup\n      if (n.nodeName === 'OPTGROUP') {\n        data.push(this.getDataFromOptgroup(n as HTMLOptGroupElement))\n      }\n\n      // Option\n      if (n.nodeName === 'OPTION') {\n        data.push(this.getDataFromOption(n as HTMLOptionElement))\n      }\n    }\n\n    return data\n  }\n\n  public getDataFromOptgroup(optgroup: HTMLOptGroupElement): Optgroup {\n    let data = {\n      id: optgroup.id,\n      label: optgroup.label,\n      selectAll: optgroup.dataset ? optgroup.dataset.selectall === 'true' : false,\n      selectAllText: optgroup.dataset ? optgroup.dataset.selectalltext : 'Select all',\n      closable: optgroup.dataset ? optgroup.dataset.closable : 'off',\n      options: []\n    } as Optgroup\n\n    const options = optgroup.childNodes as any as HTMLOptionElement[]\n    for (const o of options) {\n      if (o.nodeName === 'OPTION') {\n        data.options!.push(this.getDataFromOption(o as HTMLOptionElement))\n      }\n    }\n\n    return data\n  }\n\n  // From passed in option pull pieces of usable information\n  public getDataFromOption(option: HTMLOptionElement): Option {\n    return {\n      id: option.id,\n      value: option.value,\n      text: option.text,\n      html: option.dataset && option.dataset.html ? option.dataset.html : '',\n      defaultSelected: option.defaultSelected,\n      selected: option.selected,\n      display: option.style.display !== 'none',\n      disabled: option.disabled,\n      mandatory: option.dataset ? option.dataset.mandatory === 'true' : false,\n      placeholder: option.dataset.placeholder === 'true',\n      class: option.className,\n      style: option.style.cssText,\n      data: option.dataset\n    } as Option\n  }\n\n  public getSelectedOptions(): Option[] {\n    let options = []\n\n    // Loop through options and set selected\n    const opts = this.select.childNodes as any as (HTMLOptGroupElement | HTMLOptionElement)[]\n    for (const o of opts) {\n      if (o.nodeName === 'OPTGROUP') {\n        const optgroupOptions = o.childNodes as any as HTMLOptionElement[]\n        for (const oo of optgroupOptions) {\n          if (oo.nodeName === 'OPTION') {\n            const option = oo as HTMLOptionElement\n            if (option.selected) {\n              options.push(this.getDataFromOption(option))\n            }\n          }\n        }\n      }\n\n      if (o.nodeName === 'OPTION') {\n        const option = o as HTMLOptionElement\n        if (option.selected) {\n          options.push(this.getDataFromOption(option))\n        }\n      }\n    }\n\n    return options\n  }\n\n  public getSelectedValues(): string[] {\n    return this.getSelectedOptions().map((option) => option.value)\n  }\n\n  public setSelected(ids: string[]): void {\n    // Stop listening to changes\n    this.changeListen(false)\n\n    // Loop through options and set selected\n    const options = this.select.childNodes as any as (HTMLOptGroupElement | HTMLOptionElement)[]\n    for (const o of options) {\n      if (o.nodeName === 'OPTGROUP') {\n        const optgroup = o as HTMLOptGroupElement\n        const optgroupOptions = optgroup.childNodes as any as HTMLOptionElement[]\n        for (const oo of optgroupOptions) {\n          if (oo.nodeName === 'OPTION') {\n            const option = oo as HTMLOptionElement\n            option.selected = ids.includes(option.id)\n          }\n        }\n      }\n\n      if (o.nodeName === 'OPTION') {\n        const option = o as HTMLOptionElement\n        option.selected = ids.includes(option.id)\n      }\n    }\n\n    // Stop listening to changes\n    this.changeListen(true)\n  }\n\n  // Set selected options by value instead of id\n  // This is useful when the id is not known\n  // and only the value is known\n  // but the value is not unique and can be duplicated\n  public setSelectedByValue(values: string[]): void {\n    // Stop listening to changes\n    this.changeListen(false)\n\n    // Loop through options and set selected\n    const options = this.select.childNodes as any as (HTMLOptGroupElement | HTMLOptionElement)[]\n    for (const o of options) {\n      if (o.nodeName === 'OPTGROUP') {\n        const optgroup = o as HTMLOptGroupElement\n        const optgroupOptions = optgroup.childNodes as any as HTMLOptionElement[]\n        for (const oo of optgroupOptions) {\n          if (oo.nodeName === 'OPTION') {\n            const option = oo as HTMLOptionElement\n            option.selected = values.includes(option.value)\n          }\n        }\n      }\n\n      if (o.nodeName === 'OPTION') {\n        const option = o as HTMLOptionElement\n        option.selected = values.includes(option.value)\n      }\n    }\n\n    // Stop listening to changes\n    this.changeListen(true)\n  }\n\n  public updateSelect(id?: string, style?: string, classes?: string[]): void {\n    // Stop listening to changes\n    this.changeListen(false)\n\n    // Update id, only if the id isnt already set\n    if (id) {\n      this.select.dataset.id = id\n    }\n\n    // Update style\n    if (style) {\n      this.select.style.cssText = style\n    }\n\n    // Update classes\n    if (classes) {\n      this.select.className = ''\n      classes.forEach((c) => {\n        if (c.trim() !== '') {\n          this.select.classList.add(c.trim())\n        }\n      })\n    }\n\n    // Start listening to changes\n    this.changeListen(true)\n  }\n\n  public updateOptions(data: (Option | Optgroup)[]): void {\n    // Stop listening to changes\n    this.changeListen(false)\n\n    // Clear out select\n    this.select.innerHTML = ''\n\n    for (const d of data) {\n      if (d instanceof Optgroup) {\n        this.select.appendChild(this.createOptgroup(d))\n      }\n\n      if (d instanceof Option) {\n        this.select.appendChild(this.createOption(d))\n      }\n    }\n\n    // Trigger change event on original select\n    this.select.dispatchEvent(new Event('change', { bubbles: true }))\n\n    // Start listening to changes\n    this.changeListen(true)\n  }\n\n  public createOptgroup(optgroup: Optgroup): HTMLOptGroupElement {\n    const optgroupEl = document.createElement('optgroup')\n    optgroupEl.id = optgroup.id\n    optgroupEl.label = optgroup.label\n    if (optgroup.selectAll) {\n      optgroupEl.dataset.selectAll = 'true'\n    }\n    if (optgroup.closable !== 'off') {\n      optgroupEl.dataset.closable = optgroup.closable\n    }\n    if (optgroup.options) {\n      for (const option of optgroup.options) {\n        optgroupEl.appendChild(this.createOption(option as Option))\n      }\n    }\n    return optgroupEl\n  }\n\n  public createOption(info: Option): HTMLOptionElement {\n    const optionEl = document.createElement('option')\n    optionEl.id = info.id\n    optionEl.value = info.value\n    optionEl.textContent = info.text\n    if (info.html !== '') {\n      optionEl.setAttribute('data-html', info.html)\n    }\n    optionEl.defaultSelected = info.defaultSelected\n    optionEl.selected = info.selected // Explicitly set selected because defaultSelected: true sets selected to true\n    if (info.disabled) {\n      optionEl.disabled = true\n    }\n    if (!info.display) {\n      optionEl.style.display = 'none'\n    }\n    if (info.placeholder) {\n      optionEl.setAttribute('data-placeholder', 'true')\n    }\n    if (info.mandatory) {\n      optionEl.setAttribute('data-mandatory', 'true')\n    }\n    if (info.class) {\n      info.class.split(' ').forEach((optionClass: string) => {\n        optionEl.classList.add(optionClass)\n      })\n    }\n    if (info.data && typeof info.data === 'object') {\n      Object.keys(info.data).forEach((key) => {\n        optionEl.setAttribute('data-' + kebabCase(key), info.data[key])\n      })\n    }\n\n    return optionEl\n  }\n\n  public destroy() {\n    this.changeListen(false)\n\n    // Remove event change listener\n    this.select.removeEventListener('change', this.valueChange)\n\n    // Disconnect observer and null\n    if (this.observer) {\n      this.observer.disconnect()\n      this.observer = null\n    }\n\n    // Remove dataset id from original select\n    delete this.select.dataset.id\n\n    // Show the original select\n    this.showUI()\n  }\n}\n","import { generateID } from './helpers'\n\nexport default class Settings {\n  public id: string = '' // Primary ID for the select\n  public style: string = '' // Style attribute from the select element\n  public class: string[] = [] // Class attribute from the select element\n\n  // Dynamic settings\n  public isMultiple: boolean = false\n  public isOpen: boolean = false\n  public isFullOpen: boolean = false\n  public intervalMove: ReturnType<typeof setInterval> | null = null\n\n  // Fields set from constructor\n  public disabled: boolean\n  public alwaysOpen: boolean\n  public showSearch: boolean\n  public focusSearch: boolean\n  public ariaLabel: string\n  public searchPlaceholder: string\n  public searchText: string\n  public searchingText: string\n  public searchHighlight: boolean\n  public closeOnSelect: boolean\n  public contentLocation: HTMLElement | null\n  public contentPosition: 'relative' | 'absolute' | 'fixed'\n  public openPosition: 'auto' | 'up' | 'down'\n  public placeholderText: string\n  public allowDeselect: boolean\n  public hideSelected: boolean\n  public keepOrder: boolean\n  public showOptionTooltips: boolean\n  public minSelected: number\n  public maxSelected: number\n  public timeoutDelay: number\n  public maxValuesShown: number\n  public maxValuesMessage: string\n  public addableText: string\n\n  constructor(settings?: Partial<Settings>) {\n    if (!settings) {\n      settings = {}\n    }\n\n    this.id = 'ss-' + generateID()\n    this.style = settings.style || ''\n    this.class = settings.class || []\n\n    this.disabled = settings.disabled !== undefined ? settings.disabled : false\n    this.alwaysOpen = settings.alwaysOpen !== undefined ? settings.alwaysOpen : false\n    this.showSearch = settings.showSearch !== undefined ? settings.showSearch : true\n    this.focusSearch = settings.focusSearch !== undefined ? settings.focusSearch : true\n    this.ariaLabel = settings.ariaLabel || 'Combobox'\n    this.searchPlaceholder = settings.searchPlaceholder || 'Search'\n    this.searchText = settings.searchText || 'No Results'\n    this.searchingText = settings.searchingText || 'Searching...'\n    this.searchHighlight = settings.searchHighlight !== undefined ? settings.searchHighlight : false\n    this.closeOnSelect = settings.closeOnSelect !== undefined ? settings.closeOnSelect : true\n    this.contentLocation = settings.contentLocation || document.body\n    this.contentPosition = settings.contentPosition || 'absolute'\n    this.openPosition = settings.openPosition || 'auto' // options: auto, up, down\n    this.placeholderText = settings.placeholderText !== undefined ? settings.placeholderText : 'Select Value'\n    this.allowDeselect = settings.allowDeselect !== undefined ? settings.allowDeselect : false\n    this.hideSelected = settings.hideSelected !== undefined ? settings.hideSelected : false\n    this.keepOrder = settings.keepOrder !== undefined ? settings.keepOrder : false\n    this.showOptionTooltips = settings.showOptionTooltips !== undefined ? settings.showOptionTooltips : false\n    this.minSelected = settings.minSelected || 0\n    this.maxSelected = settings.maxSelected || 1000\n    this.timeoutDelay = settings.timeoutDelay || 200\n    this.maxValuesShown = settings.maxValuesShown || 20\n    this.maxValuesMessage = settings.maxValuesMessage || '{number} selected'\n    this.addableText = settings.addableText || 'Press \"Enter\" to add {value}'\n  }\n}\n","import CssClasses from './classes'\nimport { debounce, hasClassInTree, isEqual } from './helpers'\nimport Render from './render'\nimport Select from './select'\nimport Settings from './settings'\nimport Store, { Option, Optgroup } from './store'\n\n// Export classes\nexport { Select, Settings, Render, Store, Option, Optgroup }\n\nexport interface Config {\n  select: string | Element\n  data?: (Partial<Option> | Partial<Optgroup>)[]\n  settings?: Partial<Settings>\n  cssClasses?: Partial<CssClasses>\n  events?: Events\n}\n\nexport interface Events {\n  search?: (\n    searchValue: string,\n    currentData: (Option | Optgroup)[]\n  ) => Promise<(Partial<Option> | Partial<Optgroup>)[]> | (Partial<Option> | Partial<Optgroup>)[]\n  searchFilter?: (option: Option, search: string) => boolean\n  addable?: (\n    value: string\n  ) => Promise<Partial<Option> | string> | Partial<Option> | string | false | null | undefined | Error\n  beforeChange?: (newVal: Option[], oldVal: Option[]) => boolean | void\n  afterChange?: (newVal: Option[]) => void\n  beforeOpen?: () => void\n  afterOpen?: () => void\n  beforeClose?: () => void\n  afterClose?: () => void\n  error?: (err: Error) => void\n}\n\nexport default class SlimSelect {\n  public selectEl: HTMLSelectElement\n\n  // Classes\n  public settings!: Settings\n  public cssClasses!: CssClasses\n  public select!: Select\n  public store!: Store\n  public render!: Render\n\n  // Timeout tracking for cleanup\n  private openTimeout: ReturnType<typeof setTimeout> | null = null\n  private closeTimeout: ReturnType<typeof setTimeout> | null = null\n\n  // Events\n  public events = {\n    search: undefined,\n    searchFilter: (opt: Option, search: string) => {\n      return opt.text.toLowerCase().indexOf(search.toLowerCase()) !== -1\n    },\n    addable: undefined,\n    beforeChange: undefined,\n    afterChange: undefined,\n    beforeOpen: undefined,\n    afterOpen: undefined,\n    beforeClose: undefined,\n    afterClose: undefined\n  } as Events\n\n  constructor(config: Config) {\n    // Make sure you get the right element\n    this.selectEl = (\n      typeof config.select === 'string' ? document.querySelector(config.select) : config.select\n    ) as HTMLSelectElement\n    if (!this.selectEl) {\n      if (config.events && config.events.error) {\n        config.events.error(new Error('Could not find select element'))\n      }\n      return\n    }\n    if (this.selectEl.tagName !== 'SELECT') {\n      if (config.events && config.events.error) {\n        config.events.error(new Error('Element isnt of type select'))\n      }\n      return\n    }\n\n    // If select already has a slim select id on it lets destroy it first\n    if (this.selectEl.dataset.ssid) {\n      this.destroy()\n    }\n\n    // Set settings\n    this.settings = new Settings(config.settings)\n\n    // Set CSS classes\n    this.cssClasses = new CssClasses(config.cssClasses)\n\n    // Set events\n    const debounceEvents = ['beforeOpen', 'afterOpen', 'beforeClose', 'afterClose']\n    for (const key in config.events) {\n      // Check if key exists in events\n      if (!config.events.hasOwnProperty(key)) {\n        continue\n      }\n\n      // Check if key is in debounceEvents\n      if (debounceEvents.indexOf(key) !== -1) {\n        ;(this.events as { [key: string]: any })[key] = debounce((config.events as { [key: string]: any })[key], 100)\n      } else {\n        ;(this.events as { [key: string]: any })[key] = (config.events as { [key: string]: any })[key]\n      }\n    }\n\n    // Upate settings with type, style and classname\n    this.settings.disabled = config.settings?.disabled ? config.settings.disabled : this.selectEl.disabled\n    this.settings.isMultiple = this.selectEl.multiple\n    this.settings.style = this.selectEl.style.cssText\n    this.settings.class = this.selectEl.className.split(' ')\n\n    // Set select class\n    this.select = new Select(this.selectEl)\n    this.select.updateSelect(this.settings.id, this.settings.style, this.settings.class)\n    this.select.hideUI() // Hide the original select element\n\n    // Add select listeners\n    this.select.onValueChange = (options: Option[]) => {\n      // Run set selected from the values given\n      this.setSelected(options.map((option) => option.id))\n    }\n    this.select.onClassChange = (classes: string[]) => {\n      // Update settings with new class\n      this.settings.class = classes\n\n      // Run render updateClassStyles\n      this.render.updateClassStyles()\n    }\n    this.select.onDisabledChange = (disabled: boolean) => {\n      if (disabled) {\n        this.disable()\n      } else {\n        this.enable()\n      }\n    }\n    this.select.onOptionsChange = (data: (Option | Optgroup)[]) => {\n      // Run set data from the values given\n      this.setData(data)\n    }\n\n    // Set store class\n    const data = config.data ? config.data : this.select.getData()\n    this.store = new Store(this.settings.isMultiple ? 'multiple' : 'single', data)\n\n    // If data is passed update the original select element\n    if (config.data) {\n      this.select.updateOptions(this.store.getData())\n    }\n\n    // Set render renderCallbacks\n    const renderCallbacks = {\n      open: this.open.bind(this),\n      close: this.close.bind(this),\n      addable: this.events.addable ? this.events.addable : undefined,\n      setSelected: this.setSelected.bind(this),\n      addOption: this.addOption.bind(this),\n      search: this.search.bind(this),\n      beforeChange: this.events.beforeChange,\n      afterChange: this.events.afterChange\n    }\n\n    // Setup render class\n    this.render = new Render(this.settings, this.cssClasses, this.store, renderCallbacks)\n    this.render.renderValues()\n    this.render.renderOptions(this.store.getData())\n\n    // Add aria-label or aria-labelledby if exists\n    const selectAriaLabel = this.selectEl.getAttribute('aria-label')\n    const selectAriaLabelledBy = this.selectEl.getAttribute('aria-labelledby')\n\n    if (selectAriaLabel) {\n      this.render.main.main.setAttribute('aria-label', selectAriaLabel)\n    } else if (selectAriaLabelledBy) {\n      this.render.main.main.setAttribute('aria-labelledby', selectAriaLabelledBy)\n    }\n\n    // Add render after original select element\n    if (this.selectEl.parentNode) {\n      this.selectEl.parentNode.insertBefore(this.render.main.main, this.selectEl.nextSibling)\n    }\n\n    // Add window resize listener to moveContent if window size changes\n    window.addEventListener('resize', this.windowResize, false)\n\n    // If the user wants to show the content forcibly on a specific side,\n    // there is no need to listen for scroll events\n    if (this.settings.openPosition === 'auto') {\n      window.addEventListener('scroll', this.windowScroll, false)\n    }\n\n    // Add window visibility change listener to closeContent if window is hidden\n    document.addEventListener('visibilitychange', this.windowVisibilityChange)\n\n    // If disabled lets call it\n    if (this.settings.disabled) {\n      this.disable()\n    }\n\n    // If alwaysOpnen then open it\n    if (this.settings.alwaysOpen) {\n      this.open()\n    }\n\n    // Add SlimSelect to select element\n    ;(this.selectEl as any).slim = this\n  }\n\n  // Set to enabled and remove disabled classes\n  public enable(): void {\n    this.settings.disabled = false\n\n    this.select.enable()\n    this.render.enable()\n  }\n\n  // Set to disabled and add disabled classes\n  public disable(): void {\n    this.settings.disabled = true\n\n    this.select.disable()\n    this.render.disable()\n  }\n\n  public getData(): Option[] | Optgroup[] {\n    return this.store.getData()\n  }\n\n  public setData(data: (Partial<Option> | Partial<Optgroup>)[]): void {\n    // Get original selected values\n    const selected = this.store.getSelected()\n\n    // Validate data\n    const err = this.store.validateDataArray(data)\n    if (err) {\n      if (this.events.error) {\n        this.events.error(err)\n      }\n      return\n    }\n\n    // Update the store\n    this.store.setData(data)\n    const dataClean = this.store.getData()\n\n    // Update original select element\n    this.select.updateOptions(dataClean)\n\n    // Update the render\n    this.render.renderValues()\n    this.render.renderOptions(dataClean)\n\n    // Trigger afterChange event, if it doesnt equal the original selected values\n    if (this.events.afterChange && !isEqual(selected, this.store.getSelected())) {\n      this.events.afterChange(this.store.getSelectedOptions())\n    }\n  }\n\n  public getSelected(): string[] {\n    let options = this.store.getSelectedOptions()\n    if (this.settings.keepOrder) {\n      options = this.store.selectedOrderOptions(options)\n    }\n    return options.map((option) => option.value)\n  }\n\n  // Will take in a string or array of strings and set the selected by either the id or value\n  public setSelected(values: string | string[], runAfterChange = true): void {\n    // Get original selected values\n    const selected = this.store.getSelected()\n    const options = this.store.getDataOptions()\n    values = Array.isArray(values) ? values : [values]\n    const ids = []\n\n    // for back-compatibility support both, set by id and set by value\n    for (const value of values) {\n      if (options.find((option) => option.id == value)) {\n        ids.push(value)\n        continue\n      }\n\n      // if option with given id is not found try to search by value\n      for (const option of options.filter((option) => option.value == value)) {\n        ids.push(option.id)\n      }\n    }\n\n    // Update the store\n    this.store.setSelectedBy('id', ids)\n    const data = this.store.getData()\n\n    // Update the select element\n    this.select.updateOptions(data)\n\n    // Update the render\n    this.render.renderValues()\n\n    // If there is a search input value lets run through the search again\n    // Otherwise we will just render the options from store data\n    if (this.render.content.search.input.value !== '') {\n      this.search(this.render.content.search.input.value)\n    } else {\n      this.render.renderOptions(data)\n    }\n\n    // Trigger afterChange event, if it doesnt equal the original selected values\n    if (runAfterChange && this.events.afterChange && !isEqual(selected, this.store.getSelected())) {\n      this.events.afterChange(this.store.getSelectedOptions())\n    }\n  }\n\n  public addOption(option: Partial<Option>): void {\n    // Get original selected values\n    const selected = this.store.getSelected()\n\n    // Add option to store if it does not already include the option\n    if (!this.store.getDataOptions().some((o) => o.value === (option.value ?? option.text))) {\n      this.store.addOption(option)\n    }\n    const data = this.store.getData()\n\n    // Update the select element\n    this.select.updateOptions(data)\n\n    // Update the render\n    this.render.renderValues()\n    this.render.renderOptions(data)\n\n    // Trigger afterChange event, if it doesnt equal the original selected values\n    if (this.events.afterChange && !isEqual(selected, this.store.getSelected())) {\n      this.events.afterChange(this.store.getSelectedOptions())\n    }\n  }\n\n  public open(): void {\n    // Dont open if disabled\n    // Dont do anything if the content is already open\n    if (this.settings.disabled || this.settings.isOpen) {\n      return\n    }\n\n    // Run beforeOpen callback\n    if (this.events.beforeOpen) {\n      this.events.beforeOpen()\n    }\n\n    // Tell render to open\n    this.render.open()\n\n    // Focus on input field only if search is enabled\n    if (this.settings.showSearch && this.settings.focusSearch) {\n      this.render.searchFocus()\n    }\n\n    this.settings.isOpen = true\n    // setTimeout is for animation completion\n    this.openTimeout = setTimeout(() => {\n      // Run afterOpen callback\n      if (this.events.afterOpen) {\n        this.events.afterOpen()\n      }\n\n      // Update settings\n      // Prevent overide if user close fast without wait full open\n      // For detail see issue https://github.com/brianvoe/slim-select/issues/397\n      if (this.settings.isOpen) {\n        this.settings.isFullOpen = true\n      }\n\n      // Add onclick listener to document to closeContent if clicked outside\n      document.addEventListener('click', this.documentClick)\n    }, this.settings.timeoutDelay)\n\n    // Start an interval to check if main has moved\n    // in order to keep content close to main\n    if (this.settings.contentPosition === 'absolute') {\n      if (this.settings.intervalMove) {\n        clearInterval(this.settings.intervalMove)\n      }\n      this.settings.intervalMove = setInterval(this.render.moveContent.bind(this.render), 500)\n    }\n  }\n\n  public close(eventType: string | null = null): void {\n    // Dont do anything if the content is already closed\n    // Dont do anything if alwaysOpen is true\n    if (!this.settings.isOpen || this.settings.alwaysOpen) {\n      return\n    }\n\n    // Run beforeClose calback\n    if (this.events.beforeClose) {\n      this.events.beforeClose()\n    }\n\n    // Tell render to close\n    this.render.close()\n\n    // Clear search input visually (but don't trigger search event)\n    this.render.clearSearch()\n\n    // If we arent tabbing focus back on the main element\n    this.render.mainFocus(eventType)\n\n    // Update settings\n    this.settings.isOpen = false\n    this.settings.isFullOpen = false\n\n    // Reset the content below\n    this.closeTimeout = setTimeout(() => {\n      // Run afterClose callback\n      if (this.events.afterClose) {\n        this.events.afterClose()\n      }\n\n      // Add onclick listener to document to closeContent if clicked outside\n      document.removeEventListener('click', this.documentClick)\n    }, this.settings.timeoutDelay)\n\n    if (this.settings.intervalMove) {\n      clearInterval(this.settings.intervalMove)\n    }\n  }\n\n  // Take in string value and search current options\n  public search(value: string): void {\n    // If the passed in value is not the same as the search input value\n    // then lets update the search input value\n    if (this.render.content.search.input.value !== value) {\n      this.render.content.search.input.value = value\n    }\n\n    // If no search event run regular search\n    if (!this.events.search) {\n      // If value is empty then render all options\n      const searchResults = value === '' ? this.store.getData() : this.store.search(value, this.events.searchFilter!)\n      this.render.renderOptions(searchResults)\n      return\n    }\n\n    // Search event exists so lets render the searching text\n    this.render.renderSearching()\n\n    // Based upon the search event deal with the response\n    const searchResp = this.events.search(value, this.store.getSelectedOptions())\n\n    // If the search event returns a promise\n    if (searchResp instanceof Promise) {\n      searchResp\n        .then((data: (Partial<Option> | Partial<Optgroup>)[]) => {\n          // Update store data with search results, preserving selected options\n          this.store.setData(data, true)\n\n          // Update original select element\n          this.select.updateOptions(this.store.getData())\n\n          // Render the updated data\n          this.render.renderOptions(this.store.getData())\n        })\n        .catch((err: Error | string) => {\n          // Update the render with error\n          this.render.renderError(typeof err === 'string' ? err : err.message)\n        })\n\n      return\n    } else if (Array.isArray(searchResp)) {\n      // Update store data with search results, preserving selected options\n      this.store.setData(searchResp, true)\n\n      // Update original select element\n      this.select.updateOptions(this.store.getData())\n\n      // Render the updated data\n      this.render.renderOptions(this.store.getData())\n    } else {\n      // Update the render with error\n      this.render.renderError('Search event must return a promise or an array of data')\n    }\n  }\n\n  public destroy(): void {\n    // Clear any pending timeouts\n    if (this.openTimeout) {\n      clearTimeout(this.openTimeout)\n      this.openTimeout = null\n    }\n    if (this.closeTimeout) {\n      clearTimeout(this.closeTimeout)\n      this.closeTimeout = null\n    }\n    if (this.settings.intervalMove) {\n      clearInterval(this.settings.intervalMove)\n      this.settings.intervalMove = null\n    }\n\n    // Remove all event listeners\n    document.removeEventListener('click', this.documentClick)\n    window.removeEventListener('resize', this.windowResize, false)\n    if (this.settings.openPosition === 'auto') {\n      window.removeEventListener('scroll', this.windowScroll, false)\n    }\n    document.removeEventListener('visibilitychange', this.windowVisibilityChange)\n\n    // Delete the store data\n    this.store.setData([])\n\n    // Remove the render\n    this.render.destroy()\n\n    // Show the original select element\n    this.select.destroy()\n  }\n\n  private windowResize: (e: Event) => void = debounce(() => {\n    if (!this.settings.isOpen && !this.settings.isFullOpen) {\n      return\n    }\n\n    this.render.moveContent()\n  })\n\n  // Event listener for window scrolling\n  private windowScroll: (e: Event) => void = debounce(() => {\n    // If the content is not open, there is no need to move it\n    if (!this.settings.isOpen && !this.settings.isFullOpen) {\n      return\n    }\n\n    this.render.moveContent()\n  })\n\n  // Event listener for document click\n  private documentClick: (e: Event) => void = (e: Event) => {\n    // If the content is not open, there is no need to close it\n    if (!this.settings.isOpen) {\n      return\n    }\n\n    // Check if the click was on the content by looking at the parents\n    if (e.target && !hasClassInTree(e.target as HTMLElement, this.settings.id)) {\n      this.close(e.type)\n    }\n  }\n\n  // Event Listener for window visibility change\n  private windowVisibilityChange: (e: Event) => void = () => {\n    if (document.hidden) {\n      this.close()\n    }\n  }\n}\n"],"names":["CssClasses","classes","generateID","hasClassInTree","element","className","hasClass","e","c","parentByClass","debounce","func","wait","immediate","timeout","args","context","later","callNow","isEqual","a","b","kebabCase","str","result","match","Option","option","Optgroup","optgroup","o","Store","type","data","dataObj","validationError","dataFinal","optOptions","preserveSelected","newData","selectedOptions","missingSelected","selectedOption","found","newItem","opt","addToStart","selectedType","selectedValues","firstOption","hasSelected","selectedObjects","optionValue","selectedIds","value","id","options","search","searchFilter","filter","includeOptgroup","dataSearch","newOrder","isIn","Render","settings","store","callbacks","dirClass","selectedId","listboxId","main","highlighted","values","deselect","shouldDelete","before","after","deselectSvg","deselectPath","arrow","arrowPath","eventType","placeholderOption","placeholderText","placeholder","selected","selectedSingle","singleValue","currentNodes","maxValuesMessage","removeNodes","node","n","d","shouldAdd","i","text","deleteDiv","deleteSvg","deletePath","list","input","addable","searchReturn","highlightedEnter","plus","plusPath","inputValue","runFinish","oo","newOption","ids","addableValue","notPlaceholder","notDisabled","notHidden","query","dir","prevOption","prevParent","optgroupLabel","selectOption","selectParent","firstHighlight","listId","error","errorDiv","searchingDiv","noResults","fragment","optgroupEl","optgroupLabelText","optgroupActions","selectAll","allSelected","selectAllText","selectAllSvg","selectAllBox","selectAllCheck","currentSelected","newSelected","s","optionIds","optgroupClosable","optgroupClosableSvg","optgroupClosableArrow","optionEl","dataClass","elementID","isCmd","shouldUpdate","isCurrentlySelected","lastIndex","currentIndex","startIndex","endIndex","newSelections","isModifierKey","searchTerm","escapedSearch","tempDiv","highlightTextNodes","regex","wrapper","part","index","mark","child","mainHeight","contentHeight","containerRect","container","cTop","cBottom","eTop","eBottom","mainRect","hasSelectedItems","isMultiple","allowDeselect","deselectButton","hideClass","Select","select","listen","ev","mutations","classChanged","disabledChanged","optgroupOptionChanged","m","nodes","opts","optgroupOptions","style","info","optionClass","key","Settings","SlimSelect","config","debounceEvents","disabled","renderCallbacks","selectAriaLabel","selectAriaLabelledBy","err","dataClean","runAfterChange","searchResults","searchResp"],"mappings":"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"}